<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CoreRemoting</name>
    </assembly>
    <members>
        <member name="T:CoreRemoting.Authentication.AuthenticationRequestMessage">
            <summary>
            Describes an authentication request message.
            </summary>
        </member>
        <member name="P:CoreRemoting.Authentication.AuthenticationRequestMessage.Credentials">
            <summary>
            Get or sets an array of credentials for authentication.
            </summary>
        </member>
        <member name="T:CoreRemoting.Authentication.AuthenticationResponseMessage">
            <summary>
            Describes an authentication response message.
            </summary>
        </member>
        <member name="P:CoreRemoting.Authentication.AuthenticationResponseMessage.IsAuthenticated">
            <summary>
            Gets or sets whether authentication was successful.
            </summary>
        </member>
        <member name="P:CoreRemoting.Authentication.AuthenticationResponseMessage.AuthenticatedIdentity">
            <summary>
            Get or sets the authenticated identity.
            </summary>
        </member>
        <member name="T:CoreRemoting.Authentication.Credential">
            <summary>
            Describes an authentication credential.
            </summary>
        </member>
        <member name="P:CoreRemoting.Authentication.Credential.Name">
            <summary>
            Gets or sets the name of the credential (e.g. "password").
            </summary>
        </member>
        <member name="P:CoreRemoting.Authentication.Credential.Value">
            <summary>
            Get or sets the value of the credential (e.g. "secret").
            </summary>
        </member>
        <member name="T:CoreRemoting.Authentication.IAuthenticationProvider">
            <summary>
            Interface for authentication providers.
            </summary>
        </member>
        <member name="M:CoreRemoting.Authentication.IAuthenticationProvider.Authenticate(CoreRemoting.Authentication.Credential[],CoreRemoting.Authentication.RemotingIdentity@)">
            <summary>
            Authenticates the provided credentials and returns the authenticated identity, if successful.
            </summary>
            <param name="credentials">Array of credentials</param>
            <param name="authenticatedIdentity">Authenticated Identity</param>
            <returns>Indicates whether the authentication was successful.</returns>
        </member>
        <member name="T:CoreRemoting.Authentication.RemotingIdentity">
            <summary>
            Identity authenticated by a CoreRemoting server.
            </summary>
        </member>
        <member name="P:CoreRemoting.Authentication.RemotingIdentity.Name">
            <summary>
            Gets or sets the name of the identity.
            </summary>
        </member>
        <member name="P:CoreRemoting.Authentication.RemotingIdentity.Domain">
            <summary>
            Gets or sets the optional domain or realm name of the identity.
            </summary>
        </member>
        <member name="P:CoreRemoting.Authentication.RemotingIdentity.Roles">
            <summary>
            Gets or sets an array of roles, the identity is member of.
            </summary>
        </member>
        <member name="P:CoreRemoting.Authentication.RemotingIdentity.AuthenticationType">
            <summary>
            Gets or sets a string, that describes the authentication type.
            </summary>
        </member>
        <member name="P:CoreRemoting.Authentication.RemotingIdentity.IsAuthenticated">
            <summary>
            Gets or sets whether the identity was successful authenticated or not.
            </summary>
        </member>
        <member name="T:CoreRemoting.CallContext">
            <summary>
            Provides a way to set contextual data that flows with the call and 
            async context of a invocation.
            </summary>
        </member>
        <member name="M:CoreRemoting.CallContext.SetData(System.String,System.Object)">
            <summary>
            Stores a given object and associates it with the specified name.
            </summary>
            <param name="name">The name with which to associate the new item in the call context.</param>
            <param name="data">The object to store in the call context.</param>
        </member>
        <member name="M:CoreRemoting.CallContext.GetData(System.String)">
            <summary>
            Retrieves an object with the specified name from the <see cref="T:CoreRemoting.CallContext"/>.
            </summary>
            <param name="name">The name of the item in the call context.</param>
            <returns>The object in the call context associated with the specified name, or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:CoreRemoting.CallContext.GetSnapshot">
            <summary>
            Gets a serializable snapshot of the current call context.
            </summary>
            <returns>Array of call context entries</returns>
        </member>
        <member name="M:CoreRemoting.CallContext.RestoreFromSnapshot(System.Collections.Generic.IEnumerable{CoreRemoting.CallContextEntry})">
            <summary>
            Restore the call context from a snapshot.
            </summary>
            <param name="entries">Call context entries</param>
        </member>
        <member name="T:CoreRemoting.CallContextEntry">
            <summary>
            Describes a single call context entry.
            </summary>
        </member>
        <member name="P:CoreRemoting.CallContextEntry.Name">
            <summary>
            Gets or sets the name of the call context entry. 
            </summary>
        </member>
        <member name="P:CoreRemoting.CallContextEntry.Value">
            <summary>
            Gets or sets the value of the call context entry.
            </summary>
        </member>
        <member name="T:CoreRemoting.Channels.IClientChannel">
            <summary>
            Interface for CoreRemoting client side transport channel.
            </summary>
        </member>
        <member name="M:CoreRemoting.Channels.IClientChannel.Init(CoreRemoting.IRemotingClient)">
            <summary>
            Initializes the channel.
            </summary>
            <param name="client">CoreRemoting client</param>
        </member>
        <member name="M:CoreRemoting.Channels.IClientChannel.Connect">
            <summary>
            Establish a connection with the server.
            </summary>
        </member>
        <member name="M:CoreRemoting.Channels.IClientChannel.Disconnect">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="P:CoreRemoting.Channels.IClientChannel.IsConnected">
            <summary>
            Gets whether the connection is established or not.
            </summary>
        </member>
        <member name="P:CoreRemoting.Channels.IClientChannel.RawMessageTransport">
            <summary>
            Gets the raw message transport component for this connection.
            </summary>
        </member>
        <member name="T:CoreRemoting.Channels.IRawMessageTransport">
            <summary>
            Interface to be implemented by raw message transport components.
            </summary>
        </member>
        <member name="E:CoreRemoting.Channels.IRawMessageTransport.ReceiveMessage">
            <summary>
            Event: Fires when a message is received from server.
            </summary>
        </member>
        <member name="E:CoreRemoting.Channels.IRawMessageTransport.ErrorOccured">
            <summary>
            Event: Fires when an error is occurred.
            </summary>
        </member>
        <member name="P:CoreRemoting.Channels.IRawMessageTransport.LastException">
            <summary>
            Gets or sets the last exception.
            </summary>
        </member>
        <member name="M:CoreRemoting.Channels.IRawMessageTransport.SendMessage(System.Byte[])">
            <summary>
            Sends a message to the server.
            </summary>
            <param name="rawMessage">Raw message data</param>
        </member>
        <member name="T:CoreRemoting.Channels.IServerChannel">
            <summary>
            Interface for CoreRemoting server side transport channel.
            </summary>
        </member>
        <member name="M:CoreRemoting.Channels.IServerChannel.Init(CoreRemoting.IRemotingServer)">
            <summary>
            Initializes the channel.
            </summary>
            <param name="server">CoreRemoting sever</param>
        </member>
        <member name="M:CoreRemoting.Channels.IServerChannel.StartListening">
            <summary>
            Start listening for client requests.
            </summary>
        </member>
        <member name="M:CoreRemoting.Channels.IServerChannel.StopListening">
            <summary>
            Stop listening for client requests.
            </summary>
        </member>
        <member name="P:CoreRemoting.Channels.IServerChannel.IsListening">
            <summary>
            Gets whether the channel is listening or not.
            </summary>
        </member>
        <member name="T:CoreRemoting.Channels.NetworkException">
            <summary>
            Exception that is thrown when a network operation is failed.
            </summary>
        </member>
        <member name="M:CoreRemoting.Channels.NetworkException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the NetworkException class.
            </summary>
            <param name="message">Error message</param>
            <param name="innerEx">Optional inner exception</param>
        </member>
        <member name="M:CoreRemoting.Channels.NetworkException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Without this constructor, deserialization will fail. 
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="T:CoreRemoting.Channels.Websocket.RpcWebsocketSharpBehavior">
            <summary>
            Executes RPC calls from clients.
            </summary>
        </member>
        <member name="E:CoreRemoting.Channels.Websocket.RpcWebsocketSharpBehavior.ReceiveMessage">
            <summary>
            Event: Fired when a message is received via websocket.
            </summary>
        </member>
        <member name="E:CoreRemoting.Channels.Websocket.RpcWebsocketSharpBehavior.ErrorOccured">
            <summary>
            Event: Fires when an error is occurred.
            </summary>
        </member>
        <member name="M:CoreRemoting.Channels.Websocket.RpcWebsocketSharpBehavior.#ctor(CoreRemoting.IRemotingServer)">
            <summary>
            Initializes the RPC service instance.
            </summary>
            <param name="server">Remoting server instance, which is hosting the service to call</param>
        </member>
        <member name="M:CoreRemoting.Channels.Websocket.RpcWebsocketSharpBehavior.SendMessage(System.Byte[])">
            <summary>
            Sends a message over the websocket.
            </summary>
            <param name="rawMessage">Raw data of the message</param>
        </member>
        <member name="M:CoreRemoting.Channels.Websocket.RpcWebsocketSharpBehavior.OnMessage(WebSocketSharp.MessageEventArgs)">
            <summary>
            Called when a message from a client is received.
            </summary>
            <param name="e">Metadata and the message from client</param>
        </member>
        <member name="M:CoreRemoting.Channels.Websocket.RpcWebsocketSharpBehavior.BeforeDisposeSession">
            <summary>
            Closes the internal websocket session.
            </summary>
        </member>
        <member name="M:CoreRemoting.Channels.Websocket.RpcWebsocketSharpBehavior.OnError(WebSocketSharp.ErrorEventArgs)">
            <summary>
            Event procedure: Called, if an error occurs at the websocket layer.
            </summary>
            <param name="e">Message and optional Exception info</param>
        </member>
        <member name="M:CoreRemoting.Channels.Websocket.RpcWebsocketSharpBehavior.Dispose">
            <summary>
            Frees managed resources.
            </summary>
        </member>
        <member name="P:CoreRemoting.Channels.Websocket.RpcWebsocketSharpBehavior.LastException">
            <summary>
            Gets or sets the last exception.
            </summary>
        </member>
        <member name="T:CoreRemoting.Channels.Websocket.WebsocketClientChannel">
            <summary>
            Client side websocket channel implementation.
            </summary>
        </member>
        <member name="E:CoreRemoting.Channels.Websocket.WebsocketClientChannel.ReceiveMessage">
            <summary>
            Event: Fires when a message is received from server.
            </summary>
        </member>
        <member name="E:CoreRemoting.Channels.Websocket.WebsocketClientChannel.ErrorOccured">
            <summary>
            Event: Fires when an error is occurred.
            </summary>
        </member>
        <member name="M:CoreRemoting.Channels.Websocket.WebsocketClientChannel.Init(CoreRemoting.IRemotingClient)">
            <summary>
            Initializes the channel.
            </summary>
            <param name="client">CoreRemoting client</param>
        </member>
        <member name="M:CoreRemoting.Channels.Websocket.WebsocketClientChannel.Connect">
            <summary>
            Establish a websocket connection with the server.
            </summary>
        </member>
        <member name="M:CoreRemoting.Channels.Websocket.WebsocketClientChannel.OnError(System.Object,WebSocketSharp.ErrorEventArgs)">
            <summary>
            Event procedure: Called when a error occurs on the websocket layer.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CoreRemoting.Channels.Websocket.WebsocketClientChannel.Disconnect">
            <summary>
            Closes the websocket connection.
            </summary>
        </member>
        <member name="P:CoreRemoting.Channels.Websocket.WebsocketClientChannel.IsConnected">
            <summary>
            Gets whether the websocket connection is established or not.
            </summary>
        </member>
        <member name="P:CoreRemoting.Channels.Websocket.WebsocketClientChannel.RawMessageTransport">
            <summary>
            Gets the raw message transport component for this connection.
            </summary>
        </member>
        <member name="M:CoreRemoting.Channels.Websocket.WebsocketClientChannel.Dispose">
            <summary>
            Disconnect and free manages resources.
            </summary>
        </member>
        <member name="M:CoreRemoting.Channels.Websocket.WebsocketClientChannel.OnMessage(System.Object,WebSocketSharp.MessageEventArgs)">
            <summary>
            Event procedure: Called when a message from server is received.
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments containing the message content</param>
        </member>
        <member name="M:CoreRemoting.Channels.Websocket.WebsocketClientChannel.SendMessage(System.Byte[])">
            <summary>
            Sends a message to the server.
            </summary>
            <param name="rawMessage">Raw message data</param>
        </member>
        <member name="P:CoreRemoting.Channels.Websocket.WebsocketClientChannel.LastException">
            <summary>
            Gets or sets the last exception.
            </summary>
        </member>
        <member name="T:CoreRemoting.Channels.Websocket.WebsocketServerChannel">
            <summary>
            Server side websocket channel implementation.
            </summary>
        </member>
        <member name="M:CoreRemoting.Channels.Websocket.WebsocketServerChannel.Init(CoreRemoting.IRemotingServer)">
            <summary>
            Initializes the channel.
            </summary>
            <param name="server">CoreRemoting sever</param>
        </member>
        <member name="M:CoreRemoting.Channels.Websocket.WebsocketServerChannel.StartListening">
            <summary>
            Start listening for client requests.
            </summary>
        </member>
        <member name="M:CoreRemoting.Channels.Websocket.WebsocketServerChannel.StopListening">
            <summary>
            Stop listening for client requests.
            </summary>
        </member>
        <member name="P:CoreRemoting.Channels.Websocket.WebsocketServerChannel.IsListening">
            <summary>
            Gets whether the channel is listening or not.
            </summary>
        </member>
        <member name="M:CoreRemoting.Channels.Websocket.WebsocketServerChannel.Dispose">
            <summary>
            Stops listening and frees managed resources.
            </summary>
        </member>
        <member name="T:CoreRemoting.ClassicRemotingApi.ConfigSection.ClientInstanceConfigElement">
            <summary>
            Configuration element for a CoreRemoting client instance.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.ClientInstanceConfigElement.UniqueInstanceName">
            <summary>
            Gets or sets the unique name of the client instance.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.ClientInstanceConfigElement.ServerHostName">
            <summary>
            Gets or sets the server hostname.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.ClientInstanceConfigElement.ServerPort">
            <summary>
            Gets or sets the server network port.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.ClientInstanceConfigElement.KeySize">
            <summary>
            Gets or sets the RSA key size for message encryption.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.ClientInstanceConfigElement.Serializer">
            <summary>
            Gets or sets the name of the serializer which should be used by the client instance.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.ClientInstanceConfigElement.Channel">
            <summary>
            Gets or sets the type of the client channel which should be used for communication.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.ClientInstanceConfigElement.MessageEncryption">
            <summary>
            Gets or set whether messages should be encrypted or not.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.ClientInstanceConfigElement.IsDefault">
            <summary>
            Gets or set whether this is the default client.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.ClientInstanceConfigElement.ConnectionTimeout">
            <summary>
            Gets or sets the connection timeout in seconds (0 means infinite).
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.ClientInstanceConfigElement.AuthenticationTimeout">
            <summary>
            Gets or sets the authentication timeout in seconds (0 means infinite).
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.ClientInstanceConfigElement.InvocationTimeout">
            <summary>
            Gets or sets the invocation timeout in seconds (0 means infinite).
            </summary>
        </member>
        <member name="T:CoreRemoting.ClassicRemotingApi.ConfigSection.ClientInstanceConfigElementCollection">
            <summary>
            Collection of ClientInstanceConfigElement objects.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.ClientInstanceConfigElementCollection.Item(System.Int32)">
            <summary>
            Gets an element of the collection by its index.
            </summary>
            <param name="index">Numeric index (zero based)</param>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.ClientInstanceConfigElementCollection.Item(System.String)">
            <summary>
            Gets an element of the collection by its string key.
            </summary>
            <param name="key">Unique string key of the element</param>
        </member>
        <member name="M:CoreRemoting.ClassicRemotingApi.ConfigSection.ClientInstanceConfigElementCollection.CreateNewElement">
            <summary>
            Creates a new element.
            </summary>
            <returns>New ClientInstanceConfigElement object</returns>
        </member>
        <member name="M:CoreRemoting.ClassicRemotingApi.ConfigSection.ClientInstanceConfigElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Get the unique key of a specified element.
            </summary>
            <param name="element">Configuration element</param>
            <returns>Unique key</returns>
        </member>
        <member name="T:CoreRemoting.ClassicRemotingApi.ConfigSection.ConfigSectionExtensionMethods">
            <summary>
            Extension methods for XML configuration classes.
            </summary>
        </member>
        <member name="M:CoreRemoting.ClassicRemotingApi.ConfigSection.ConfigSectionExtensionMethods.ToWellKnownServiceTypeEntry(CoreRemoting.ClassicRemotingApi.ConfigSection.WellKnownServiceConfigElement)">
            <summary>
            Converts a wellknown service XML config object into a WellknownServiceTypeEntry object.
            </summary>
            <param name="configElement">Service definition from XML config</param>
            <returns>WellknownServiceTypeEntry object</returns>
        </member>
        <member name="M:CoreRemoting.ClassicRemotingApi.ConfigSection.ConfigSectionExtensionMethods.ToServerConfig(CoreRemoting.ClassicRemotingApi.ConfigSection.ServerInstanceConfigElement)">
            <summary>
            Converts a server XML config object into a ServerConfig object.
            </summary>
            <param name="configElement">Configuration element</param>
            <returns>ServerConfig object</returns>
        </member>
        <member name="M:CoreRemoting.ClassicRemotingApi.ConfigSection.ConfigSectionExtensionMethods.ToClientConfig(CoreRemoting.ClassicRemotingApi.ConfigSection.ClientInstanceConfigElement)">
            <summary>
            Converts a client XML config object into a ClientConfig object.
            </summary>
            <param name="configElement">Configuration element</param>
            <returns>ClientConfig object</returns>
        </member>
        <member name="M:CoreRemoting.ClassicRemotingApi.ConfigSection.ConfigSectionExtensionMethods.GetTypeFromConfigString(System.String)">
            <summary>
            Gets a type from a string that contains type name and assembly name.
            </summary>
            <param name="assemblyAndTypeConfigString">String containing type name and assembly name, separated by a comma</param>
            <returns>Type object</returns>
            <exception cref="T:System.FormatException">Thrown, if string format is invalid</exception>
        </member>
        <member name="M:CoreRemoting.ClassicRemotingApi.ConfigSection.ConfigSectionExtensionMethods.CreateServerChannelFromConfigName(System.String)">
            <summary>
            Creates a server channel from a type string.
            </summary>
            <param name="channelTypeName">String containing a channel type shortcut (e.g. "ws" for websockets) or a type name and assembly name, separated by a comma</param>
            <returns>Server channel</returns>
        </member>
        <member name="M:CoreRemoting.ClassicRemotingApi.ConfigSection.ConfigSectionExtensionMethods.CreateClientChannelFromConfigName(System.String)">
            <summary>
            Creates a client channel from a type string.
            </summary>
            <param name="channelTypeName">String containing a channel type shortcut (e.g. "ws" for websockets) or a type name and assembly name, separated by a comma</param>
            <returns>Client channel</returns>
        </member>
        <member name="M:CoreRemoting.ClassicRemotingApi.ConfigSection.ConfigSectionExtensionMethods.CreateSerializerAdapterFromConfigName(System.String)">
            <summary>
            Creates a serializer adapter from a type string.
            </summary>
            <param name="serializerName">String containing a serializer (e.g. "binary" for a binary serializer) type shortcut or a type name and assembly name, separated by a comma</param>
            <returns></returns>
        </member>
        <member name="T:CoreRemoting.ClassicRemotingApi.ConfigSection.CoreRemotingConfigSection">
            <summary>
            Defines a configuration section for CoreRemoting configuration in a XML config file.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.CoreRemotingConfigSection.ServerInstances">
            <summary>
            Gets a collection of configured CoreRemoting server instances.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.CoreRemotingConfigSection.Services">
            <summary>
            Gets a collection of configured CoreRemoting services.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.CoreRemotingConfigSection.ClientInstances">
            <summary>
            Gets a collection of configured CoreRemoting client instances.
            </summary>
        </member>
        <member name="T:CoreRemoting.ClassicRemotingApi.ConfigSection.ServerInstanceConfigElement">
            <summary>
            Configuration element for a CoreRemoting server instance.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.ServerInstanceConfigElement.UniqueInstanceName">
            <summary>
            Gets or sets the unique name of the server instance.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.ServerInstanceConfigElement.HostName">
            <summary>
            Gets or sets the hostname the server instance is bound to.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.ServerInstanceConfigElement.NetworkPort">
            <summary>
            Gets or sets the network port on which the server instance is listening on.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.ServerInstanceConfigElement.KeySize">
            <summary>
            Gets or sets the RSA key size for message encryption.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.ServerInstanceConfigElement.Serializer">
            <summary>
            Gets or sets the name of the serializer which should be used by the server instance.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.ServerInstanceConfigElement.Channel">
            <summary>
            Gets or sets the type of the server channel which should be used for communication.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.ServerInstanceConfigElement.AuthenticationProvider">
            <summary>
            Gets or sets the type of authentication provider which should be used to authenticate client credentials.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.ServerInstanceConfigElement.AuthenticationRequired">
            <summary>
            Gets or sets whether authentication is required or not.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.ServerInstanceConfigElement.MessageEncryption">
            <summary>
            Gets or set whether messages should be encrypted or not.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.ServerInstanceConfigElement.IsDefault">
            <summary>
            Gets or set whether this is the default server.
            </summary>
        </member>
        <member name="T:CoreRemoting.ClassicRemotingApi.ConfigSection.ServerInstanceConfigElementCollection">
            <summary>
            Collection of ServerInstanceConfigElement objects.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.ServerInstanceConfigElementCollection.Item(System.Int32)">
            <summary>
            Gets an element of the collection by its index.
            </summary>
            <param name="index">Numeric index (zero based)</param>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.ServerInstanceConfigElementCollection.Item(System.String)">
            <summary>
            Gets an element of the collection by its string key.
            </summary>
            <param name="key">Unique string key of the element</param>
        </member>
        <member name="M:CoreRemoting.ClassicRemotingApi.ConfigSection.ServerInstanceConfigElementCollection.CreateNewElement">
            <summary>
            Creates a new element.
            </summary>
            <returns>New ServerInstanceConfigElement object</returns>
        </member>
        <member name="M:CoreRemoting.ClassicRemotingApi.ConfigSection.ServerInstanceConfigElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Get the unique key of a specified element.
            </summary>
            <param name="element">Configuration element</param>
            <returns>Unique key</returns>
        </member>
        <member name="T:CoreRemoting.ClassicRemotingApi.ConfigSection.WellKnownServiceConfigElement">
            <summary>
            Configuration element for a wellknown CoreRemoting service.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.WellKnownServiceConfigElement.InterfaceAssemblyName">
            <summary>
            Get or sets the assembly name of the service’s interface assembly.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.WellKnownServiceConfigElement.InterfaceTypeName">
            <summary>
            Get or sets the type name of the service interface.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.WellKnownServiceConfigElement.ImplementationAssemblyName">
            <summary>
            Get or sets the assembly of the service's implementation assembly. 
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.WellKnownServiceConfigElement.ImplementationTypeName">
            <summary>
            Gets or sets the implementation type of the service.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.WellKnownServiceConfigElement.Lifetime">
            <summary>
            Gets or sets the service's lifetime.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.WellKnownServiceConfigElement.ServiceName">
            <summary>
            Gets or sets the unique service name.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.WellKnownServiceConfigElement.UniqueServerInstanceName">
            <summary>
            Gets or sets the unique name of the server hosting this service.
            </summary>
        </member>
        <member name="T:CoreRemoting.ClassicRemotingApi.ConfigSection.WellKnownServiceConfigElementCollection">
            <summary>
            Collection of WellKnownServiceConfigElement objects.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.WellKnownServiceConfigElementCollection.Item(System.Int32)">
            <summary>
            Gets an element of the collection by its index.
            </summary>
            <param name="index">Numeric index (zero based)</param>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.ConfigSection.WellKnownServiceConfigElementCollection.Item(System.String)">
            <summary>
            Gets an element of the collection by its string key.
            </summary>
            <param name="key">Unique string key of the element</param>
        </member>
        <member name="M:CoreRemoting.ClassicRemotingApi.ConfigSection.WellKnownServiceConfigElementCollection.CreateNewElement">
            <summary>
            Creates a new element.
            </summary>
            <returns>New WellKnownServiceConfigElement object</returns>
        </member>
        <member name="M:CoreRemoting.ClassicRemotingApi.ConfigSection.WellKnownServiceConfigElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Get the unique key of a specified element.
            </summary>
            <param name="element">Configuration element</param>
            <returns>Unique key</returns>
        </member>
        <member name="T:CoreRemoting.ClassicRemotingApi.RemotingConfiguration">
            <summary>
            Provides CoreRemoting configuration in classic .NET Remoting style.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.RemotingConfiguration.RegisteredServerInstances">
            <summary>
            Gets a list of currently registered CoreRemoting server instances.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.RemotingConfiguration.RegisteredClientInstances">
            <summary>
            Gets a list of currently registered CoreRemoting client instances.
            </summary>
        </member>
        <member name="M:CoreRemoting.ClassicRemotingApi.RemotingConfiguration.GetRegisteredServer(System.String)">
            <summary>
            Gets a registered server instance by its unique name.
            </summary>
            <param name="uniqueServerInstanceName">Unique server instance name</param>
            <returns>CoreRemoting server</returns>
        </member>
        <member name="M:CoreRemoting.ClassicRemotingApi.RemotingConfiguration.GetRegisteredClient(System.String)">
            <summary>
            Gets a registered client instance by its unique name.
            </summary>
            <param name="uniqueClientInstanceName">Unique client instance name</param>
            <returns>CoreRemoting client</returns>
        </member>
        <member name="M:CoreRemoting.ClassicRemotingApi.RemotingConfiguration.RegisterServer(CoreRemoting.ServerConfig)">
            <summary>
            Registers a new CoreRemoting server instance and returns it's unique instance name.
            </summary>
            <param name="config">Server configuration</param>
            <returns>Unique server instance name</returns>
        </member>
        <member name="M:CoreRemoting.ClassicRemotingApi.RemotingConfiguration.RegisterClient(CoreRemoting.ClientConfig)">
            <summary>
            Registers a new CoreRemoting client instance and returns it's unique instance name.
            </summary>
            <param name="config">Client configuration</param>
            <returns>Unique client instance name</returns>
        </member>
        <member name="M:CoreRemoting.ClassicRemotingApi.RemotingConfiguration.UnregisterServer(System.String)">
            <summary>
            Unregisters a CoreRemoting server.
            </summary>
            <param name="uniqueServerInstanceName">Unique name of the server instance</param>
        </member>
        <member name="M:CoreRemoting.ClassicRemotingApi.RemotingConfiguration.UnregisterClient(System.String)">
            <summary>
            Unregisters a CoreRemoting client.
            </summary>
            <param name="uniqueClientInstanceName">Unique name of the client instance</param>
        </member>
        <member name="M:CoreRemoting.ClassicRemotingApi.RemotingConfiguration.RegisterWellKnownServiceType(CoreRemoting.ClassicRemotingApi.WellKnownServiceTypeEntry)">
            <summary>
            Registers a service.
            </summary>
            <param name="entry">Service configuration data</param>
            <exception cref="T:System.ArgumentNullException">Thrown if parameter 'entry' is null</exception>
        </member>
        <member name="M:CoreRemoting.ClassicRemotingApi.RemotingConfiguration.RegisterWellKnownServiceType(System.Type,System.Type,CoreRemoting.DependencyInjection.ServiceLifetime,System.String,System.String)">
            <summary>
            Registers a service.
            </summary>
            <param name="interfaceType">Service interface type</param>
            <param name="implementationType">Service implementation type</param>
            <param name="lifetime">LIfetime (SingleCall / Singleton)</param>
            <param name="serviceName">Unique name of the service (Full name of interface type is used, if left blank)</param>
            <param name="uniqueServerInstanceName">Unique instance name of the CoreRemoting server that should used for hosting this service</param>
        </member>
        <member name="M:CoreRemoting.ClassicRemotingApi.RemotingConfiguration.Configure(System.String,CoreRemoting.Authentication.Credential[])">
            <summary>
            Applies CoreRemoting server configuration from config file. 
            </summary>
            <param name="fileName">Path to XML configuration file (Default EXE configuration file will be used, if empty)</param>
            <param name="credentials">Optional credentials for authentication</param>
        </member>
        <member name="M:CoreRemoting.ClassicRemotingApi.RemotingConfiguration.ShutdownAll">
            <summary>
            Shutdown all registered clients and servers.
            </summary>
        </member>
        <member name="T:CoreRemoting.ClassicRemotingApi.RemotingServices">
            <summary>
            Provides several methods for using and publishing remoted objects and proxies.
            </summary>
        </member>
        <member name="M:CoreRemoting.ClassicRemotingApi.RemotingServices.IsOneWay(System.Reflection.MethodBase)">
            <summary>
            Returns a Boolean value that indicates whether the client that called the method specified in the given message is waiting for the server to finish processing the method before continuing execution.
            </summary>
            <param name="method">The method in question</param>
            <returns>True if the method is one way; otherwise, false.</returns>
        </member>
        <member name="M:CoreRemoting.ClassicRemotingApi.RemotingServices.IsTransparentProxy(System.Object)">
            <summary>
            Returns a Boolean value that indicates whether the given object is a transparent proxy or a real object.
            </summary>
            <param name="proxy">The reference to the object to check.</param>
            <returns>A Boolean value that indicates whether the object specified in the proxy parameter is a transparent proxy or a real object.</returns>
        </member>
        <member name="M:CoreRemoting.ClassicRemotingApi.RemotingServices.Marshal(System.Object,System.String,System.Type,System.String)">
            <summary>
            Registers a object as CoreRemoting service.
            </summary>
            <param name="serviceInstance">Object instance that should be registered as service</param>
            <param name="serviceName">Unique service name (Interface full type name is used, if left blank)</param>
            <param name="interfaceType">Service interface type</param>
            <param name="uniqueServerInstanceName">Unique server instance name</param>
            <returns>Service name</returns>
        </member>
        <member name="M:CoreRemoting.ClassicRemotingApi.RemotingServices.Connect(System.Type,System.String,System.String)">
            <summary>
            Creates a proxy for a remote CoreRemoting service.
            </summary>
            <param name="interfaceType">Service interface type</param>
            <param name="serviceName">Optional service name</param>
            <param name="uniqueClientInstanceName">Unique client instance name (Default client is used if empty)</param>
            <returns>Proxy</returns>
        </member>
        <member name="T:CoreRemoting.ClassicRemotingApi.WellKnownServiceTypeEntry">
            <summary>
            Describes a wellknown service.
            </summary>
        </member>
        <member name="M:CoreRemoting.ClassicRemotingApi.WellKnownServiceTypeEntry.#ctor(System.String,System.String,System.String,System.String,CoreRemoting.DependencyInjection.ServiceLifetime,System.String,System.String)">
            <summary>
            Creates a new instance of the WellKnownServiceTypeEntry class.
            </summary>
            <param name="interfaceAssemblyName">Interface assembly name of the service</param>
            <param name="interfaceTypeName">Interface type name of the service</param>
            <param name="implementationAssemblyName">Implementation assembly name of the service</param>
            <param name="implementationTypeName">Implementation type name of the service</param>
            <param name="lifetime">Lifetime of the service (Singleton / SingleCall)</param>
            <param name="serviceName">Unique service name (Full name of the interface type is used, when left blank)</param>
            <param name="uniqueServerInstanceName">Unique instance name of the host server (default server is used, if left blank)</param>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.WellKnownServiceTypeEntry.UniqueServerInstanceName">
            <summary>
            Gets or sets the unique instance name of the host server.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.WellKnownServiceTypeEntry.ImplementationAssemblyName">
            <summary>
            Gets or sets the implementation assembly name.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.WellKnownServiceTypeEntry.ImplementationTypeName">
            <summary>
            Gets or sets the implementation type name.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.WellKnownServiceTypeEntry.InterfaceAssemblyName">
            <summary>
            Gets or sets the interface assembly name.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.WellKnownServiceTypeEntry.InterfaceTypeName">
            <summary>
            Gets or sets the interface type name.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.WellKnownServiceTypeEntry.Lifetime">
            <summary>
            Gets or sets the service's lifetime.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClassicRemotingApi.WellKnownServiceTypeEntry.ServiceName">
            <summary>
            Gets or sets the unique service name (Full name of interface type is used, if left blank).
            </summary>
        </member>
        <member name="T:CoreRemoting.ClientConfig">
            <summary>
            Provides configuration settings for a CoreRemoting client instance.
            </summary>
        </member>
        <member name="M:CoreRemoting.ClientConfig.#ctor">
            <summary>
            Creates a new instance of the ClientConfig class.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClientConfig.UniqueClientInstanceName">
            <summary>
            Gets or sets the unqiue name of the configured client instance.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClientConfig.ConnectionTimeout">
            <summary>
            Gets or sets the connection timeout in seconds (0 means infinite).
            </summary>
        </member>
        <member name="P:CoreRemoting.ClientConfig.AuthenticationTimeout">
            <summary>
            Gets or sets the authentication timeout in seconds (0 means infinite).
            </summary>
        </member>
        <member name="P:CoreRemoting.ClientConfig.InvocationTimeout">
            <summary>
            Gets or sets the invocation timeout in seconds (0 means infinite).
            </summary>
        </member>
        <member name="P:CoreRemoting.ClientConfig.ServerHostName">
            <summary>
            Gets or sets the host name of the CoreRemoting server to be connected to.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClientConfig.ServerPort">
            <summary>
            Gets or sets the network port of the CoreRemoting server to be connected to.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClientConfig.Serializer">
            <summary>
            Gets or sets the serializer to be used (Binary serializer is used, if set to null).
            </summary>
        </member>
        <member name="P:CoreRemoting.ClientConfig.KeySize">
            <summary>
            Gets or sets the key size for asymmetric encryption (only relevant, if message encryption is enabled).
            </summary>
        </member>
        <member name="P:CoreRemoting.ClientConfig.MessageEncryption">
            <summary>
            Gets or sets whether messages should be encrypted or not.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClientConfig.Channel">
            <summary>
            Gets or sets the client channel to be used for transport of messages over the wire (WebsocketClientChannel is used, if set to null).
            </summary>
        </member>
        <member name="P:CoreRemoting.ClientConfig.Credentials">
            <summary>
            Gets or sets an array of credentials for authentication (depends on the authentication provider used on server side). 
            </summary>
        </member>
        <member name="P:CoreRemoting.ClientConfig.KeepSessionAliveInterval">
            <summary>
            Gets or sets an interval in seconds to keep session alive, even on idle (session is not kept alive if set to 0).
            </summary>
        </member>
        <member name="P:CoreRemoting.ClientConfig.IsDefault">
            <summary>
            Gets or set whether this is the default client.
            </summary>
        </member>
        <member name="T:CoreRemoting.ClientRpcContext">
            <summary>
            Describes the client side context of a RPC call.
            </summary>
        </member>
        <member name="M:CoreRemoting.ClientRpcContext.#ctor">
            <summary>
            Creates a new instance of the ClientRpcContext class.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClientRpcContext.UniqueCallKey">
            <summary>
            Gets the unique key of RPC call.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClientRpcContext.ResultMessage">
            <summary>
            Gets or sets the result message, that was received from server after the call was invoked on server side.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClientRpcContext.Error">
            <summary>
            Gets or sets whether this RPC call is in error state.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClientRpcContext.RemoteException">
            <summary>
            Gets or sets an exception that describes an error that occurred on server side RPC invocation.
            </summary>
        </member>
        <member name="P:CoreRemoting.ClientRpcContext.WaitHandle">
            <summary>
            Gets a wait handle that is set, when the response of this RPC call is received from server.
            </summary>
        </member>
        <member name="M:CoreRemoting.ClientRpcContext.Dispose">
            <summary>
            Frees managed resources.
            </summary>
        </member>
        <member name="T:CoreRemoting.DependencyInjection.CastleWindsorDependencyInjectionContainer">
            <summary>
            Castle Windsor DI-Container-Wrapper.
            </summary>
        </member>
        <member name="M:CoreRemoting.DependencyInjection.CastleWindsorDependencyInjectionContainer.#ctor">
            <summary>
            Creates a new instance of the CastleWindsorDependencyInjectionContainer class.
            </summary>
        </member>
        <member name="M:CoreRemoting.DependencyInjection.CastleWindsorDependencyInjectionContainer.GetService(System.String)">
            <summary>
            Gets a service instance by service name.
            </summary>
            <param name="serviceName">Unique service name</param>
            <returns>Service instance</returns>
        </member>
        <member name="M:CoreRemoting.DependencyInjection.CastleWindsorDependencyInjectionContainer.GetService``1(System.String)">
            <summary>
            Gets a service instance of a specified interface type.
            </summary>
            <param name="serviceName">Optional unique service name (Full name of interface type is used, if left blank)</param>
            <typeparam name="TServiceInterface">Service interface type</typeparam>
            <returns>Service instance</returns>
        </member>
        <member name="M:CoreRemoting.DependencyInjection.CastleWindsorDependencyInjectionContainer.RegisterService``2(CoreRemoting.DependencyInjection.ServiceLifetime,System.String)">
            <summary>
            Registers a service.
            </summary>
            <param name="lifetime">Service lifetime (Singleton / SingleCall)</param>
            <param name="serviceName">Optional unique service name</param>
            <typeparam name="TServiceInterface">Service interface type</typeparam>
            <typeparam name="TServiceImpl">Service implementation type</typeparam>
        </member>
        <member name="M:CoreRemoting.DependencyInjection.CastleWindsorDependencyInjectionContainer.RegisterService``1(System.Func{``0},CoreRemoting.DependencyInjection.ServiceLifetime,System.String)">
            <summary>
            Registers a service.
            </summary>
            <param name="factoryDelegate">Factory delegate, which is called to create service instances</param>
            <param name="lifetime">Service lifetime (Singleton / SingleCall)</param>
            <param name="serviceName">Optional unique service name</param>
            <typeparam name="TServiceInterface">Service interface type</typeparam>
        </member>
        <member name="M:CoreRemoting.DependencyInjection.CastleWindsorDependencyInjectionContainer.GetServiceInterfaceType(System.String)">
            <summary>
            Gets the service interface type of a specified service.
            </summary>
            <param name="serviceName">Unique service name</param>
            <returns>Service interface type</returns>
        </member>
        <member name="M:CoreRemoting.DependencyInjection.CastleWindsorDependencyInjectionContainer.IsRegistered``1(System.String)">
            <summary>
            Gets whether the specified service is registered or not.
            </summary>
            <param name="serviceName">Unique service name (Full service interface type name is used, if left blank)</param>
            <typeparam name="TServiceInterface">Service interface type</typeparam>
            <returns>True, if the service is registered, otherwise false</returns>
        </member>
        <member name="M:CoreRemoting.DependencyInjection.CastleWindsorDependencyInjectionContainer.GetAllRegisteredTypes">
            <summary>
            Gets all registered types.
            </summary>
            <returns>Enumerable list of registered types</returns>
        </member>
        <member name="M:CoreRemoting.DependencyInjection.CastleWindsorDependencyInjectionContainer.Dispose">
            <summary>
            Frees managed resources.
            </summary>
        </member>
        <member name="T:CoreRemoting.DependencyInjection.DependencyInjectionContainerExtensions">
            <summary>
            Provides extension methods for dependency injection containers.
            </summary>
        </member>
        <member name="M:CoreRemoting.DependencyInjection.DependencyInjectionContainerExtensions.GetRegisterServiceMethodForWellknownServiceType(CoreRemoting.DependencyInjection.IDependencyInjectionContainer,System.Type,System.Type)">
            <summary>
            Gets the method info of the RegisterService method.
            </summary>
            <param name="container">DI container</param>
            <param name="interfaceType">Service interface type</param>
            <param name="implementationType">Service implementation type</param>
            <returns>Method info of the RegisterService method</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if container is set to null</exception>
        </member>
        <member name="M:CoreRemoting.DependencyInjection.DependencyInjectionContainerExtensions.GetRegisterServiceMethodForServiceInstance(CoreRemoting.DependencyInjection.IDependencyInjectionContainer,System.Type,System.Object)">
            <summary>
            Gets the method info of the RegisterService method to register an object as service..
            </summary>
            <param name="container">DI container</param>
            <param name="interfaceType">Service interface type</param>
            <param name="serviceInstance">Service instance</param>
            <returns>Method info of the RegisterService method</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if container is set to null</exception>
        </member>
        <member name="T:CoreRemoting.DependencyInjection.IDependencyInjectionContainer">
            <summary>
            Interface to be implemented by dependency injection container integration classes.
            </summary>
        </member>
        <member name="M:CoreRemoting.DependencyInjection.IDependencyInjectionContainer.GetService(System.String)">
            <summary>
            Gets a service instance by service name.
            </summary>
            <param name="serviceName">Unique service name</param>
            <returns>Service instance</returns>
        </member>
        <member name="M:CoreRemoting.DependencyInjection.IDependencyInjectionContainer.GetService``1(System.String)">
            <summary>
            Gets a service instance of a specified interface type.
            </summary>
            <param name="serviceName">Optional unique service name (Full name of interface type is used, if left blank)</param>
            <typeparam name="TServiceInterface">Service interface type</typeparam>
            <returns>Service instance</returns>
        </member>
        <member name="M:CoreRemoting.DependencyInjection.IDependencyInjectionContainer.RegisterService``2(CoreRemoting.DependencyInjection.ServiceLifetime,System.String)">
            <summary>
            Registers a service.
            </summary>
            <param name="lifetime">Service lifetime (Singleton / SingleCall)</param>
            <param name="serviceName">Optional unique service name</param>
            <typeparam name="TServiceInterface">Service interface type</typeparam>
            <typeparam name="TServiceImpl">Service implementation type</typeparam>
        </member>
        <member name="M:CoreRemoting.DependencyInjection.IDependencyInjectionContainer.RegisterService``1(System.Func{``0},CoreRemoting.DependencyInjection.ServiceLifetime,System.String)">
            <summary>
            Registers a service.
            </summary>
            <param name="factoryDelegate">Factory delegate, which is called to create service instances</param>
            <param name="lifetime">Service lifetime (Singleton / SingleCall)</param>
            <param name="serviceName">Optional unique service name</param>
            <typeparam name="TServiceInterface">Service interface type</typeparam>
        </member>
        <member name="M:CoreRemoting.DependencyInjection.IDependencyInjectionContainer.GetServiceInterfaceType(System.String)">
            <summary>
            Gets the service interface type of a specified service.
            </summary>
            <param name="serviceName">Unique service name</param>
            <returns>Service interface type</returns>
        </member>
        <member name="M:CoreRemoting.DependencyInjection.IDependencyInjectionContainer.GetAllRegisteredTypes">
            <summary>
            Gets all registered types.
            </summary>
            <returns>Enumerable list of registered types</returns>
        </member>
        <member name="M:CoreRemoting.DependencyInjection.IDependencyInjectionContainer.IsRegistered``1(System.String)">
            <summary>
            Gets whether the specified service is registered or not.
            </summary>
            <param name="serviceName">Unique service name (Full service interface type name is used, if left blank)</param>
            <typeparam name="TServiceInterface">Service interface type</typeparam>
            <returns>True, if the service is registered, otherwise false</returns>
        </member>
        <member name="T:CoreRemoting.DependencyInjection.MicrosoftDependencyInjectionContainer">
            <summary>
            Microsoft Dependency Injection DI-Container-Wrapper.
            </summary>
        </member>
        <member name="M:CoreRemoting.DependencyInjection.MicrosoftDependencyInjectionContainer.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Creates a new instance of the MicrosoftDependencyInjectionContainer class.
            </summary>
            <param name="serviceCollection">Service collection</param>
        </member>
        <member name="M:CoreRemoting.DependencyInjection.MicrosoftDependencyInjectionContainer.GetService(System.String)">
            <summary>
            Gets a service instance by service name.
            </summary>
            <param name="serviceName">Unique service name</param>
            <returns>Service instance</returns>
        </member>
        <member name="M:CoreRemoting.DependencyInjection.MicrosoftDependencyInjectionContainer.GetService``1(System.String)">
            <summary>
            Gets a service instance of a specified interface type.
            </summary>
            <param name="serviceName">Optional unique service name (Full name of interface type is used, if left blank)</param>
            <typeparam name="TServiceInterface">Service interface type</typeparam>
            <returns>Service instance</returns>
        </member>
        <member name="M:CoreRemoting.DependencyInjection.MicrosoftDependencyInjectionContainer.RegisterService``2(CoreRemoting.DependencyInjection.ServiceLifetime,System.String)">
            <summary>
            Registers a service.
            </summary>
            <param name="lifetime">Service lifetime (Singleton / SingleCall)</param>
            <param name="serviceName">Optional unique service name</param>
            <typeparam name="TServiceInterface">Service interface type</typeparam>
            <typeparam name="TServiceImpl">Service implementation type</typeparam>
        </member>
        <member name="M:CoreRemoting.DependencyInjection.MicrosoftDependencyInjectionContainer.RegisterService``1(System.Func{``0},CoreRemoting.DependencyInjection.ServiceLifetime,System.String)">
            <summary>
            Registers a service.
            </summary>
            <param name="factoryDelegate">Factory delegate, which is called to create service instances</param>
            <param name="lifetime">Service lifetime (Singleton / SingleCall)</param>
            <param name="serviceName">Optional unique service name</param>
            <typeparam name="TServiceInterface">Service interface type</typeparam>
        </member>
        <member name="M:CoreRemoting.DependencyInjection.MicrosoftDependencyInjectionContainer.GetServiceInterfaceType(System.String)">
            <summary>
            Gets the service interface type of a specified service.
            </summary>
            <param name="serviceName">Unique service name</param>
            <returns>Service interface type</returns>
        </member>
        <member name="M:CoreRemoting.DependencyInjection.MicrosoftDependencyInjectionContainer.IsRegistered``1(System.String)">
            <summary>
            Gets whether the specified service is registered or not.
            </summary>
            <param name="serviceName">Unique service name (Full service interface type name is used, if left blank)</param>
            <typeparam name="TServiceInterface">Service interface type</typeparam>
            <returns>True, if the service is registered, otherwise false</returns>
        </member>
        <member name="M:CoreRemoting.DependencyInjection.MicrosoftDependencyInjectionContainer.GetAllRegisteredTypes">
            <summary>
            Gets all registered types.
            </summary>
            <returns>Enumerable list of registered types</returns>
        </member>
        <member name="M:CoreRemoting.DependencyInjection.MicrosoftDependencyInjectionContainer.Dispose">
            <summary>
            Frees managed resources.
            </summary>
        </member>
        <member name="T:CoreRemoting.DependencyInjection.ServiceLifetime">
            <summary>
            Describes the available service lifetime modes.
            </summary>
        </member>
        <member name="F:CoreRemoting.DependencyInjection.ServiceLifetime.Singleton">
            <summary>
            On service instance serves all calls.
            </summary>
        </member>
        <member name="F:CoreRemoting.DependencyInjection.ServiceLifetime.SingleCall">
            <summary>
            Every call is served by its own service instance.
            </summary>
        </member>
        <member name="T:CoreRemoting.Encryption.AesEncryption">
            <summary>
            Provides methods to implement symmetric AES encryption.
            </summary>
        </member>
        <member name="M:CoreRemoting.Encryption.AesEncryption.CreateHash(System.Byte[])">
            <summary>
            Creates a SHA-256 hash of a specified value.
            </summary>
            <param name="value">Value to be hashed</param>
            <returns>SHA-256 hash</returns>
        </member>
        <member name="M:CoreRemoting.Encryption.AesEncryption.GenerateIv">
            <summary>
            Generates an initialization vector.
            </summary>
            <returns>Initialization vector</returns>
            <exception cref="T:System.NotSupportedException">Thrown if AES is not supported by the current system environment</exception>
        </member>
        <member name="M:CoreRemoting.Encryption.AesEncryption.Encrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Encrypts raw data with AES.
            </summary>
            <param name="dataToEncrypt">Raw data to encrypt</param>
            <param name="sharedSecret">Shared secret</param>
            <param name="iv">Initialization vector</param>
            <returns>Encrypted data</returns>
            <exception cref="T:System.NotSupportedException">Thrown if AES is not supported by the current system environment</exception>
        </member>
        <member name="M:CoreRemoting.Encryption.AesEncryption.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Decrypts raw data with AES.
            </summary>
            <param name="encryptedData">Encrypted raw data</param>
            <param name="sharedSecret">Shared secret</param>
            <param name="iv">Initialization vector</param>
            <returns>Decrypted raw data</returns>
            <exception cref="T:System.NotSupportedException">Thrown if AES is not supported by the current system environment</exception>
        </member>
        <member name="T:CoreRemoting.Encryption.EncryptedSecret">
            <summary>
            Describes an encrypted secret.
            </summary>
        </member>
        <member name="M:CoreRemoting.Encryption.EncryptedSecret.#ctor(System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Creates a new instance of the EncryptedSecret class.
            </summary>
            <param name="encryptedSessionKey">Encrypted session key</param>
            <param name="iv">Initialization vector</param>
            <param name="encryptedMessage">Encrypted message</param>
            <param name="sendersPublicKeyBlob">Public key of the sender</param>
        </member>
        <member name="P:CoreRemoting.Encryption.EncryptedSecret.EncryptedSessionKey">
            <summary>
            Gets the encrypted session key.
            </summary>
        </member>
        <member name="P:CoreRemoting.Encryption.EncryptedSecret.EncryptedMessage">
            <summary>
            Gets the encrypted message.
            </summary>
        </member>
        <member name="P:CoreRemoting.Encryption.EncryptedSecret.Iv">
            <summary>
            Gets the initialization vector.
            </summary>
        </member>
        <member name="P:CoreRemoting.Encryption.EncryptedSecret.SendersPublicKeyBlob">
            <summary>
            Gets the public key of the sender.
            </summary>
        </member>
        <member name="T:CoreRemoting.Encryption.RsaKeyExchange">
            <summary>
            Provides methods to perform a RSA key exchange.
            </summary>
        </member>
        <member name="M:CoreRemoting.Encryption.RsaKeyExchange.EncryptSecret(System.Int32,System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Encrypts a secret with asymmetric RSA algorithm.
            </summary>
            <param name="keySize">Key size (1024, 2048, 4096, ...)</param>
            <param name="receiversPublicKeyBlob">Public key of the receiver</param>
            <param name="secretToEncrypt">Secret to encrypt</param>
            <param name="sendersPublicKeyBlob">Public key of the sender (It's not needed to encrypt the secret, but to transfer the sender's public key to the receiver)</param>
            <returns>Encrypted secret</returns>
        </member>
        <member name="M:CoreRemoting.Encryption.RsaKeyExchange.DecrpytSecret(System.Int32,System.Byte[],CoreRemoting.Encryption.EncryptedSecret)">
            <summary>
            Decrypts a secret with asymmetric RSA algorithm.
            </summary>
            <param name="keySize">Key size (1024, 2048, 4096, ...)</param>
            <param name="receiversPrivateKeyBlob">Private key of the receiver</param>
            <param name="encryptedSecret">Encrypted secret</param>
            <returns>Decrypted secret</returns>
        </member>
        <member name="T:CoreRemoting.Encryption.RsaKeyPair">
            <summary>
            Describes an RSA key pair.
            </summary>
        </member>
        <member name="M:CoreRemoting.Encryption.RsaKeyPair.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the RsaKeyPair.
            </summary>
            <param name="keySize">Key size</param>
        </member>
        <member name="M:CoreRemoting.Encryption.RsaKeyPair.#ctor(System.Int32,System.Byte[])">
            <summary>
            Creates a new instance of the RsaKeyPair.
            </summary>
            <param name="keySize">Key size</param>
            <param name="privateKey">Private key to import</param>
        </member>
        <member name="P:CoreRemoting.Encryption.RsaKeyPair.PrivateKey">
            <summary>
            Gets the private RSA key.
            </summary>
        </member>
        <member name="P:CoreRemoting.Encryption.RsaKeyPair.PublicKey">
            <summary>
            Gets the public RSA key.
            </summary>
        </member>
        <member name="P:CoreRemoting.Encryption.RsaKeyPair.KeySize">
            <summary>
            Gets the key size.
            </summary>
        </member>
        <member name="M:CoreRemoting.Encryption.RsaKeyPair.Dispose">
            <summary>
            Frees managed resources.
            </summary>
        </member>
        <member name="T:CoreRemoting.Encryption.RsaSignature">
            <summary>
            Provides methods to create and verify RSA signatures.
            </summary>
        </member>
        <member name="M:CoreRemoting.Encryption.RsaSignature.CreateSignature(System.Int32,System.Byte[],System.Byte[])">
            <summary>
            Creates a signature from the SHA256 hash value of the specified raw data.
            The private key of the provided key pair is used to create the signature.
            </summary>
            <param name="keySize">Key size (1024, 2048, 4096, ...)</param>
            <param name="sendersPrivateKeyBlob">Private key of the sender</param>
            <param name="rawData">Raw data to create a signature of</param>
            <returns>Signature</returns>
        </member>
        <member name="M:CoreRemoting.Encryption.RsaSignature.VerifySignature(System.Int32,System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Verifies a signature with the public key of the sender for the provided raw data.   
            </summary>
            <param name="keySize">Key size (1024, 2048, 4096, ...)</param>
            <param name="sendersPublicKeyBlob">Public key of the sender</param>
            <param name="rawData">Raw data which signature of should be verified</param>
            <param name="signature">The signature to verify</param>
            <returns>True is the signature is valid, otherwise false</returns>
        </member>
        <member name="T:CoreRemoting.Encryption.SignedMessageData">
            <summary>
            Container for raw message data and its RSA signature.
            </summary>
        </member>
        <member name="P:CoreRemoting.Encryption.SignedMessageData.MessageRawData">
            <summary>
            Gets or sets the unencrypted raw message data.
            </summary>
        </member>
        <member name="P:CoreRemoting.Encryption.SignedMessageData.Signature">
            <summary>
            Get or sets the RSA signature.
            </summary>
        </member>
        <member name="T:CoreRemoting.IRemotingClient">
            <summary>
            Interface of a CoreRemoting client.
            </summary>
        </member>
        <member name="P:CoreRemoting.IRemotingClient.Config">
            <summary>
            Gets the configuration settings used by the CoreRemoting client instance.
            </summary>
        </member>
        <member name="P:CoreRemoting.IRemotingClient.PublicKey">
            <summary>
            Gets the public key of this CoreRemoting client instance.
            </summary>
        </member>
        <member name="P:CoreRemoting.IRemotingClient.InvocationTimeout">
            <summary>
            Gets or sets the invocation timeout in milliseconds.
            </summary>
        </member>
        <member name="P:CoreRemoting.IRemotingClient.MessageEncryption">
            <summary>
            Gets or sets whether messages should be encrypted or not.
            </summary>
        </member>
        <member name="M:CoreRemoting.IRemotingClient.CreateProxy``1(System.String)">
            <summary>
            Creates a proxy object to provide access to a remote service.
            </summary>
            <typeparam name="T">Type of the shared interface of the remote service</typeparam>
            <param name="serviceName">Unique name of the remote service</param>
            <returns>Proxy object</returns>
        </member>
        <member name="M:CoreRemoting.IRemotingClient.CreateProxy(System.Type,System.String)">
            <summary>
            Creates a proxy object to provide access to a remote service.
            </summary>
            <param name="serviceInterfaceType">Interface type of the remote service</param>
            <param name="serviceName">Unique name of the remote service</param>
            <returns>Proxy object</returns>
        </member>
        <member name="M:CoreRemoting.IRemotingClient.ShutdownProxy(System.Object)">
            <summary>
            Shuts a specified service proxy down and frees resources.
            </summary>
            <param name="serviceProxy"></param>
        </member>
        <member name="M:CoreRemoting.IRemotingClient.Connect">
            <summary>
            Connects this CoreRemoting client instance to the configured CoreRemoting server.
            </summary>
        </member>
        <member name="M:CoreRemoting.IRemotingClient.Disconnect">
            <summary>
            Disconnects from the server. The server is actively notified about disconnection.
            </summary>
        </member>
        <member name="P:CoreRemoting.IRemotingClient.IsConnected">
            <summary>
            Gets whether the connection to the server is established or not.
            </summary>
        </member>
        <member name="P:CoreRemoting.IRemotingClient.HasSession">
            <summary>
            Gets whether this CoreRemoting client instance has a session or not.
            </summary>
        </member>
        <member name="T:CoreRemoting.IRemotingServer">
            <summary>
            Interface of a CoreRemoting server.
            </summary>
        </member>
        <member name="E:CoreRemoting.IRemotingServer.BeforeCall">
            <summary>
            Event: Fires before an RPC call is invoked.
            </summary>
        </member>
        <member name="E:CoreRemoting.IRemotingServer.AfterCall">
            <summary>
            Event: Fires after an RPC call is invoked.
            </summary>
        </member>
        <member name="E:CoreRemoting.IRemotingServer.Error">
            <summary>
            Event: Fires if an error occurs.
            </summary>
        </member>
        <member name="P:CoreRemoting.IRemotingServer.UniqueServerInstanceName">
            <summary>
            Gets the unique name of this server instance.
            </summary>
        </member>
        <member name="P:CoreRemoting.IRemotingServer.ServiceRegistry">
            <summary>
            Gets the dependency injection container that is used a service registry.
            </summary>
        </member>
        <member name="P:CoreRemoting.IRemotingServer.Serializer">
            <summary>
            Gets the configured serializer.
            </summary>
        </member>
        <member name="P:CoreRemoting.IRemotingServer.MethodCallMessageBuilder">
            <summary>
            Gets the component for easy building of method call messages.
            </summary>
        </member>
        <member name="P:CoreRemoting.IRemotingServer.MessageEncryptionManager">
            <summary>
            Gets the component for encryption and decryption of messages.
            </summary>
        </member>
        <member name="P:CoreRemoting.IRemotingServer.SessionRepository">
            <summary>
            Gets the session repository to perform session management tasks.
            </summary>
        </member>
        <member name="P:CoreRemoting.IRemotingServer.Config">
            <summary>
            Gets the configuration settings.
            </summary>
        </member>
        <member name="M:CoreRemoting.IRemotingServer.Start">
            <summary>
            Starts listening for client requests.
            </summary>
        </member>
        <member name="M:CoreRemoting.IRemotingServer.Stop">
            <summary>
            Stops listening for client requests and close all open client connections.
            </summary>
        </member>
        <member name="M:CoreRemoting.IRemotingServer.Authenticate(CoreRemoting.Authentication.Credential[],CoreRemoting.Authentication.RemotingIdentity@)">
            <summary>
            Authenticates the specified credentials and returns whether the authentication was successful or not.
            </summary>
            <param name="credentials">Credentials to be used for authentication</param>
            <param name="authenticatedIdentity">Authenticated identity (null when authentication fails)</param>
            <returns>True when authentication was successful, otherwise false</returns>
        </member>
        <member name="T:CoreRemoting.IServiceProxy">
            <summary>
            Interface to be implemented by service proxy classes.
            </summary>
        </member>
        <member name="M:CoreRemoting.IServiceProxy.Shutdown">
            <summary>
            Shuts the proxy object down.
            This is called from proxy objects finalizer because the proxy mimics its proxied interface. 
            </summary>
        </member>
        <member name="T:CoreRemoting.ISessionRepository">
            <summary>
            Interface to be implemented by CoreRemoting session repository classes.
            </summary>
        </member>
        <member name="P:CoreRemoting.ISessionRepository.KeySize">
            <summary>
            Gets the key size for asymmetric encryption. Should be 3072 or better in 2021 ;)
            </summary>
        </member>
        <member name="M:CoreRemoting.ISessionRepository.CreateSession(System.Byte[],CoreRemoting.IRemotingServer,CoreRemoting.Channels.IRawMessageTransport)">
            <summary>
            Creates a new session.
            </summary>
            <param name="clientPublicKey">Client's public key</param>
            <param name="server">Server instance</param>
            <param name="rawMessageTransport">Component that does the raw message transport</param>
            <returns>The newly created session</returns>
        </member>
        <member name="M:CoreRemoting.ISessionRepository.GetSession(System.Guid)">
            <summary>
            Gets a specified session by its ID.
            </summary>
            <param name="sessionId">Session ID</param>
            <returns>The session correlating to the specified session ID</returns>
        </member>
        <member name="P:CoreRemoting.ISessionRepository.Sessions">
            <summary>
            Gets a list of all sessions.
            </summary>
        </member>
        <member name="M:CoreRemoting.ISessionRepository.RemoveSession(System.Guid)">
            <summary>
            Removes a specified session by its ID.
            </summary>
            <param name="sessionId">Session ID</param>
        </member>
        <member name="T:CoreRemoting.MicosoftDependencyInjectionExtensionMethods">
            <summary>
            Provides extension methods for adding CoreRemoting as service to Microsoft dependency injection container.
            </summary>
        </member>
        <member name="M:CoreRemoting.MicosoftDependencyInjectionExtensionMethods.AddCoreRemotingClient(Microsoft.Extensions.DependencyInjection.IServiceCollection,CoreRemoting.ClientConfig,System.Type[])">
            <summary>
            Adds a CoreRemoting client as singleton to the service collection of a Microsoft dependency injection container.
            </summary>
            <param name="services">Service collection to which the client should be added</param>
            <param name="config">Configuration settings for the CoreRemoting client</param>
            <param name="remoteServiceInterfaceTypes">Array of remote service interface types for which proxy objects are to be added</param>
        </member>
        <member name="M:CoreRemoting.MicosoftDependencyInjectionExtensionMethods.AddCoreRemotingServer(Microsoft.Extensions.DependencyInjection.IServiceCollection,CoreRemoting.ServerConfig)">
            <summary>
            Adds a CoreRemoting server as singleton to the service collection of a Microsoft dependency injection container.
            </summary>
            <param name="services">Service collection to which the server should be added</param>
            <param name="config">Configuration settings for the CoreRemoting server</param>
        </member>
        <member name="M:CoreRemoting.MicosoftDependencyInjectionExtensionMethods.AddCoreRemotingServer(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Int32)">
            <summary>
            Adds a CoreRemoting server with default config but a specified network port as singleton
            to the service collection of a Microsoft dependency injection container.
            </summary>
            <param name="services">Service collection to which the server should be added</param>
            <param name="networkPort">Network port on which the server should be listening for client requests</param>
        </member>
        <member name="T:CoreRemoting.OneWayAttribute">
            <summary>
            Marks an method as one way method. This means that CoreRemoting client will not wait for result and CoreRemoting
            server will not send any result message (even in case of an error).
            One way methods are treated a fire-and-forget.
            </summary>
        </member>
        <member name="T:CoreRemoting.RemoteDelegates.ClientDelegateInfo">
            <summary>
            Pairs a client delegate with a service proxy instance.
            </summary>
        </member>
        <member name="M:CoreRemoting.RemoteDelegates.ClientDelegateInfo.#ctor(System.Delegate,System.Object)">
            <summary>
            Creates a new instance of the ClientDelegateInfo class.
            </summary>
            <param name="clientDelegate">Client delegate</param>
            <param name="serviceProxy">Proxy object of the remote service, which invokes the client delegate as callback</param>
        </member>
        <member name="P:CoreRemoting.RemoteDelegates.ClientDelegateInfo.ClientDelegate">
            <summary>
            Gets the client delegate.
            </summary>
        </member>
        <member name="P:CoreRemoting.RemoteDelegates.ClientDelegateInfo.ServiceProxy">
            <summary>
            Gets the service proxy.
            </summary>
        </member>
        <member name="T:CoreRemoting.RemoteDelegates.ClientDelegateRegistry">
            <summary>
            Registry for client delegates paired with service proxies.
            </summary>
        </member>
        <member name="M:CoreRemoting.RemoteDelegates.ClientDelegateRegistry.#ctor">
            <summary>
            Creates a new instance of the ClientDelegateRegistry class.
            </summary>
        </member>
        <member name="M:CoreRemoting.RemoteDelegates.ClientDelegateRegistry.RegisterClientDelegate(System.Delegate,System.Object)">
            <summary>
            Registers a client delegate as callback target for remote delegate invocation.
            </summary>
            <param name="clientDelegate">Client delegate</param>
            <param name="serviceProxy">Service proxy of the remote service</param>
            <returns>Unique handler key</returns>
            <exception cref="T:System.ArgumentNullException">Thrown an argument is null</exception>
            <exception cref="T:System.ApplicationException">Thrown, if a race condition occurs while adding the client delegate to the registry</exception>
        </member>
        <member name="M:CoreRemoting.RemoteDelegates.ClientDelegateRegistry.FindDelegate(System.Delegate)">
            <summary>
            Finds a specified registered client delegate and returns its unique handler key.
            </summary>
            <param name="delegate">Client delegate</param>
            <returns>Unique handler key</returns>
        </member>
        <member name="M:CoreRemoting.RemoteDelegates.ClientDelegateRegistry.GetDelegateByHandlerKey(System.Guid)">
            <summary>
            Gets a registered client delegate by its handler key.
            </summary>
            <param name="handlerKey">Unique handler key</param>
            <returns>Client delegate</returns>
        </member>
        <member name="M:CoreRemoting.RemoteDelegates.ClientDelegateRegistry.UnregisterClientDelegatesOfServiceProxy(System.Object)">
            <summary>
            Unregisters all client delegates that are paired withe a specified service proxy.
            </summary>
            <param name="serviceProxy">Service proxy</param>
        </member>
        <member name="M:CoreRemoting.RemoteDelegates.ClientDelegateRegistry.UnregisterClientDelegate(System.Guid)">
            <summary>
            Unregisters a specified client delegate by its handler key.
            </summary>
            <param name="handlerKey">Unique handler key</param>
        </member>
        <member name="M:CoreRemoting.RemoteDelegates.ClientDelegateRegistry.UnregisterClientDelegate(System.Delegate)">
            <summary>
            Unregister a specified client delegate.
            </summary>
            <param name="clientDelegate">Client delegate</param>
        </member>
        <member name="M:CoreRemoting.RemoteDelegates.ClientDelegateRegistry.Clear">
            <summary>
            Clear the entire client delegate registry.
            </summary>
        </member>
        <member name="T:CoreRemoting.RemoteDelegates.DelegateProxy">
            <summary>
            Proxy for intercepting calls on a specified delegate type. 
            </summary>
        </member>
        <member name="M:CoreRemoting.RemoteDelegates.DelegateProxy.#ctor(System.Type,System.Func{System.Object[],System.Object})">
            <summary>
            Creates a new instance of the DelegateProxy class.
            </summary>
            <param name="delegateType">Delegate type to be proxied</param>
            <param name="callInterceptionHandler">Function to be called when intercepting calls on the delegate</param>
        </member>
        <member name="P:CoreRemoting.RemoteDelegates.DelegateProxy.ProxiedDelegate">
            <summary>
            Gets the proxied delegate.
            </summary>
        </member>
        <member name="M:CoreRemoting.RemoteDelegates.DelegateProxy.Intercept(System.Object[])">
            <summary>
            Method called by delegate proxy, when the proxies delegate is called.
            </summary>
            <param name="args">Arguments passed to the proxied delegate by caller</param>
            <returns>Return value provided by call interception handler</returns>
        </member>
        <member name="M:CoreRemoting.RemoteDelegates.DelegateProxy.CreateProxiedDelegate(System.Type,System.Reflection.MethodInfo,System.Object)">
            <summary>
            Creates a delegate for intercepting calls on a specified delegate type. 
            </summary>
            <param name="delegateType">The delegate type to proxy</param>
            <param name="interceptMethod">Method to call when intercepting calls on the proxied delegate</param>
            <param name="interceptor">Object on which the intercept method is called</param>
            <returns>Proxied delegate</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if any argument is null</exception>
            <exception cref="T:System.NotSupportedException">Thrown if delegate type has no 'Invoke' method</exception>
            <exception cref="T:System.ArgumentException">Thrown if argument 'delegateType' is not a delegate</exception>
        </member>
        <member name="M:CoreRemoting.RemoteDelegates.DelegateProxy.Dispose">
            <summary>
            Frees managed resources.
            </summary>
        </member>
        <member name="T:CoreRemoting.RemoteDelegates.DelegateProxyFactory">
            <summary>
            Factory component to create delegate proxy instances.
            </summary>
        </member>
        <member name="M:CoreRemoting.RemoteDelegates.DelegateProxyFactory.Create(System.Type,System.Func{System.Object[],System.Object})">
            <summary>
            Creates a proxy for the specified delegate type.
            </summary>
            <param name="delegateType">Delegate type to be proxied</param>
            <param name="callInterceptionHandler">Function to be called when intercepting calls on the delegate</param>
            <returns>Delegate proxy</returns>
        </member>
        <member name="T:CoreRemoting.RemoteDelegates.IDelegateProxy">
            <summary>
            Interface to be implemented by delegate proxies.
            </summary>
        </member>
        <member name="P:CoreRemoting.RemoteDelegates.IDelegateProxy.ProxiedDelegate">
            <summary>
            Gets the proxied delegate.
            </summary>
        </member>
        <member name="T:CoreRemoting.RemoteDelegates.IDelegateProxyFactory">
            <summary>
            Interface to be implemented by delegate proxy factory components.
            </summary>
        </member>
        <member name="M:CoreRemoting.RemoteDelegates.IDelegateProxyFactory.Create(System.Type,System.Func{System.Object[],System.Object})">
            <summary>
            Creates a proxy for the specified delegate type.
            </summary>
            <param name="delegateType">Delegate type to be proxied</param>
            <param name="callInterceptionHandler">Function to be called when intercepting calls on the delegate</param>
            <returns>Delegate proxy</returns>
        </member>
        <member name="T:CoreRemoting.RemoteDelegates.RemoteDelegateInfo">
            <summary>
            Describes a remote delegate.
            </summary>
        </member>
        <member name="M:CoreRemoting.RemoteDelegates.RemoteDelegateInfo.#ctor(System.Guid,System.String)">
            <summary>
            Creates a new instance of the RemoteDelegateInfo class.
            </summary>
            <param name="handlerKey">Unique handler key of the client delegate</param>
            <param name="delegateTypeName">Type name of the client delegate</param>
        </member>
        <member name="P:CoreRemoting.RemoteDelegates.RemoteDelegateInfo.HandlerKey">
            <summary>
            Gets the handler key of the client delegate.
            </summary>
        </member>
        <member name="P:CoreRemoting.RemoteDelegates.RemoteDelegateInfo.DelegateTypeName">
            <summary>
            Gets the type name of the client delegate.
            </summary>
        </member>
        <member name="T:CoreRemoting.RemoteDelegates.RemoteDelegateInvocationEventAggregator">
            <summary>
            Event aggregator to fire event if remote delegate is invoked.
            </summary>
        </member>
        <member name="T:CoreRemoting.RemoteDelegates.RemoteDelegateInvocationEventAggregator.RemoteDelegateInvocationNeededEventHandler">
            <summary>
            Creates a new instance of the RemoteDelegateInvocationEventAggregator class.
            </summary>
            <param name="delgateType">Delegate type</param>
            <param name="uniqueCallKey">Unique key to correlate the RPC call</param>
            <param name="handlerKey">Unique handler key to correlate the client delegate to be called, when remote delegate is invoked</param>
            <param name="remoteDelegateArguments">Arguments of remote delegate invocation</param>
        </member>
        <member name="E:CoreRemoting.RemoteDelegates.RemoteDelegateInvocationEventAggregator.RemoteDelegateInvocationNeeded">
            <summary>
            Event: Fired on client side, when a remote delegate is invoked.
            </summary>
        </member>
        <member name="M:CoreRemoting.RemoteDelegates.RemoteDelegateInvocationEventAggregator.InvokeRemoteDelegate(System.Type,System.Guid,System.Object[])">
            <summary>
            To be called on server side to invoke a remote delegate, which will callback the correlating client delegate.
            </summary>
            <param name="delegateType">Delegate type</param>
            <param name="handlerKey">Unique handle key of the client delegate</param>
            <param name="remoteDelegateArguments">Arguments of remote delegate invocation</param>
            <returns>Return value provided by the client side callback</returns>
        </member>
        <member name="T:CoreRemoting.RemoteInvocationException">
            <summary>
            Exception to be thrown, if remote method invocation has been failed.
            </summary>
        </member>
        <member name="M:CoreRemoting.RemoteInvocationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the RemoteInvocationException class.
            </summary>
            <param name="message">Error message</param>
            <param name="innerEx">Optional inner exception</param>
        </member>
        <member name="M:CoreRemoting.RemoteInvocationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Without this constructor, deserialization will fail. 
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="T:CoreRemoting.RemotingClient">
            <summary>
            Provides remoting functionality on client side.
            </summary>
        </member>
        <member name="M:CoreRemoting.RemotingClient.#ctor(CoreRemoting.ClientConfig)">
            <summary>
            Creates a new instance of the RemotingClient class.
            </summary>
            <param name="config">Configuration settings</param>
        </member>
        <member name="P:CoreRemoting.RemotingClient.MethodCallMessageBuilder">
            <summary>
            Gets a utility object for building remoting messages.
            </summary>
        </member>
        <member name="P:CoreRemoting.RemotingClient.MessageEncryptionManager">
            <summary>
            Gets a utility object to provide encryption of remoting messages.
            </summary>
        </member>
        <member name="P:CoreRemoting.RemotingClient.Serializer">
            <summary>
            Gets the configured serializer.
            </summary>
        </member>
        <member name="P:CoreRemoting.RemotingClient.ClientDelegateRegistry">
            <summary>
            Gets the local client delegate registry.
            </summary>
        </member>
        <member name="P:CoreRemoting.RemotingClient.InvocationTimeout">
            <summary>
            Gets or sets the invocation timeout in milliseconds.
            </summary>
        </member>
        <member name="P:CoreRemoting.RemotingClient.MessageEncryption">
            <summary>
            Gets or sets whether messages should be encrypted or not.
            </summary>
        </member>
        <member name="P:CoreRemoting.RemotingClient.Config">
            <summary>
            Gets the configuration settings used by the CoreRemoting client instance.
            </summary>
        </member>
        <member name="P:CoreRemoting.RemotingClient.PublicKey">
            <summary>
            Gets the public key of this CoreRemoting client instance.
            </summary>
        </member>
        <member name="P:CoreRemoting.RemotingClient.IsConnected">
            <summary>
            Gets whether the connection to the server is established or not.
            </summary>
        </member>
        <member name="P:CoreRemoting.RemotingClient.HasSession">
            <summary>
            Gets whether this CoreRemoting client instance has a session or not.
            </summary>
        </member>
        <member name="P:CoreRemoting.RemotingClient.Identity">
            <summary>
            Gets the authenticated identity. May be null if authentication failed or if authentication is not configured.
            </summary>
        </member>
        <member name="M:CoreRemoting.RemotingClient.Connect">
            <summary>
            Connects this CoreRemoting client instance to the configured CoreRemoting server.
            </summary>
            <exception cref="T:CoreRemoting.RemotingException">Thrown, if no channel is configured.</exception>
            <exception cref="T:CoreRemoting.Channels.NetworkException">Thrown, if handshake with server failed.</exception>
        </member>
        <member name="M:CoreRemoting.RemotingClient.Disconnect">
            <summary>
            Disconnects from the server. The server is actively notified about disconnection.
            </summary>
        </member>
        <member name="M:CoreRemoting.RemotingClient.StartKeepSessionAliveTimer">
            <summary>
            Starts the keep session alive timer.
            </summary>
        </member>
        <member name="M:CoreRemoting.RemotingClient.KeepSessionAliveTimerOnElapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Event procedure: Called when the keep session alive timer elapses. 
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:CoreRemoting.RemotingClient.Authenticate">
            <summary>
            Authenticates this CoreRemoting client instance with the specified credentials.
            </summary>
            <exception cref="T:System.Security.SecurityException">Thrown, if authentication failed or timed out</exception>
        </member>
        <member name="M:CoreRemoting.RemotingClient.OnMessage(System.Byte[])">
            <summary>
            Called when a message is received from server.
            </summary>
            <param name="rawMessage">Raw message data</param>
        </member>
        <member name="M:CoreRemoting.RemotingClient.ProcessCompleteHandshakeMessage(CoreRemoting.RpcMessaging.WireMessage)">
            <summary>
            Processes a complete handshake message from server.
            </summary>
            <param name="message">Deserialized WireMessage that contains a plain or encrypted Session ID</param>
        </member>
        <member name="M:CoreRemoting.RemotingClient.ProcessAuthenticationResponseMessage(CoreRemoting.RpcMessaging.WireMessage)">
            <summary>
            Processes a authentication response message from server.
            </summary>
            <param name="message">Deserialized WireMessage that contains a AuthenticationResponseMessage</param>
        </member>
        <member name="M:CoreRemoting.RemotingClient.ProcessRemoteDelegateInvocationMessage(CoreRemoting.RpcMessaging.WireMessage)">
            <summary>
            Processes a remote delegate invocation message from server.
            </summary>
            <param name="message">Deserialized WireMessage that contains a RemoteDelegateInvocationMessage</param>
        </member>
        <member name="M:CoreRemoting.RemotingClient.ProcessRpcResultMessage(CoreRemoting.RpcMessaging.WireMessage)">
            <summary>
            Processes a RPC result message from server.
            </summary>
            <param name="message">Deserialized WireMessage that contains a MethodCallResultMessage or a RemoteInvocationException</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown, when the received result is of a unknown call</exception>
        </member>
        <member name="M:CoreRemoting.RemotingClient.InvokeRemoteMethod(CoreRemoting.RpcMessaging.MethodCallMessage,System.Boolean)">
            <summary>
            Calls a method on a remote service synchronously.
            </summary>
            <param name="methodCallMessage">Details of the remote method to be invoked</param>
            <param name="oneWay">Invoke method without waiting for or processing result.</param>
            <returns>Results of the remote method invocation</returns>
        </member>
        <member name="M:CoreRemoting.RemotingClient.CreateProxy``1(System.String)">
            <summary>
            Creates a proxy object to provide access to a remote service.
            </summary>
            <typeparam name="T">Type of the shared interface of the remote service</typeparam>
            <param name="serviceName">Unique name of the remote service</param>
            <returns>Proxy object</returns>
        </member>
        <member name="M:CoreRemoting.RemotingClient.CreateProxy(System.Type,System.String)">
            <summary>
            Creates a proxy object to provide access to a remote service.
            </summary>
            <param name="serviceInterfaceType">Interface type of the remote service</param>
            <param name="serviceName">Unique name of the remote service</param>
            <returns>Proxy object</returns>
        </member>
        <member name="M:CoreRemoting.RemotingClient.ShutdownProxy(System.Object)">
            <summary>
            Shuts a specified service proxy down and frees resources.
            </summary>
            <param name="serviceProxy">Proxy object that should be shut down</param>
        </member>
        <member name="M:CoreRemoting.RemotingClient.Dispose">
            <summary>
            Frees managed resources.
            </summary>
        </member>
        <member name="P:CoreRemoting.RemotingClient.ActiveClientInstances">
            <summary>
            Gets a list of active client instances.
            </summary>
        </member>
        <member name="M:CoreRemoting.RemotingClient.GetActiveClientInstance(System.String)">
            <summary>
            Gets a active client instance by its unqiue instance name.
            </summary>
            <param name="uniqueClientInstanceName">Unique client instance name</param>
            <returns>Active CoreRemoting client</returns>
        </member>
        <member name="P:CoreRemoting.RemotingClient.DefaultRemotingClient">
            <summary>
            Gets or sets the default CoreRemoting client.
            </summary>
        </member>
        <member name="T:CoreRemoting.RemotingException">
            <summary>
            Exception to be thrown, if a remoting operation has been failed.
            </summary>
        </member>
        <member name="M:CoreRemoting.RemotingException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the RemotingException class.
            </summary>
            <param name="message">Error message</param>
            <param name="innerEx">Optional inner exception</param>
        </member>
        <member name="M:CoreRemoting.RemotingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Without this constructor, deserialization will fail. 
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="T:CoreRemoting.RemotingServer">
            <summary>
            CoreRemoting server implementation.
            </summary>
        </member>
        <member name="M:CoreRemoting.RemotingServer.#ctor(CoreRemoting.ServerConfig)">
            <summary>
            Creates a new instance of the RemotingServer class.
            </summary>
            <param name="config">Configuration settings to be used (Default configuration is used, if left null)</param>
        </member>
        <member name="E:CoreRemoting.RemotingServer.BeforeCall">
            <summary>
            Event: Fires before an RPC call is invoked.
            </summary>
        </member>
        <member name="E:CoreRemoting.RemotingServer.AfterCall">
            <summary>
            Event: Fires after an RPC call is invoked.
            </summary>
        </member>
        <member name="E:CoreRemoting.RemotingServer.Error">
            <summary>
            Event: Fires if an error occurs.
            </summary>
        </member>
        <member name="P:CoreRemoting.RemotingServer.ServiceRegistry">
            <summary>
            Gets the dependency injection container that is used a service registry.
            </summary>
        </member>
        <member name="P:CoreRemoting.RemotingServer.UniqueServerInstanceName">
            <summary>
            Gets the unique name of this server instance.
            </summary>
        </member>
        <member name="P:CoreRemoting.RemotingServer.Config">
            <summary>
            Gets the configuration settings.
            </summary>
        </member>
        <member name="P:CoreRemoting.RemotingServer.Serializer">
            <summary>
            Gets the configured serializer.
            </summary>
        </member>
        <member name="P:CoreRemoting.RemotingServer.MethodCallMessageBuilder">
            <summary>
            Gets the component for easy building of method call messages.
            </summary>
        </member>
        <member name="P:CoreRemoting.RemotingServer.MessageEncryptionManager">
            <summary>
            Gets the component for encryption and decryption of messages.
            </summary>
        </member>
        <member name="P:CoreRemoting.RemotingServer.SessionRepository">
            <summary>
            Gets the session repository to perform session management tasks.
            </summary>
        </member>
        <member name="P:CoreRemoting.RemotingServer.Channel">
            <summary>
            Gets the channel used to do the raw network transport.
            </summary>
        </member>
        <member name="M:CoreRemoting.RemotingServer.OnBeforeCall(CoreRemoting.ServerRpcContext)">
            <summary>
            Fires the OnBeforeCall event.
            </summary>
            <param name="serverRpcContext">Server side RPC call context</param>
        </member>
        <member name="M:CoreRemoting.RemotingServer.OnAfterCall(CoreRemoting.ServerRpcContext)">
            <summary>
            Fires the OnAfterCall event.
            </summary>
            <param name="serverRpcContext">Server side RPC call context</param>
        </member>
        <member name="M:CoreRemoting.RemotingServer.OnError(System.Exception)">
            <summary>
            Fires the OnError event.
            </summary>
            <param name="ex">Exception that describes the occurred error</param>
        </member>
        <member name="M:CoreRemoting.RemotingServer.Start">
            <summary>
            Starts listening for client requests.
            </summary>
        </member>
        <member name="M:CoreRemoting.RemotingServer.Stop">
            <summary>
            Stops listening for client requests and close all open client connections.
            </summary>
        </member>
        <member name="M:CoreRemoting.RemotingServer.Authenticate(CoreRemoting.Authentication.Credential[],CoreRemoting.Authentication.RemotingIdentity@)">
            <summary>
            Authenticates the specified credentials and returns whether the authentication was successful or not.
            </summary>
            <param name="credentials">Credentials to be used for authentication</param>
            <param name="authenticatedIdentity">Authenticated identity (null when authentication fails)</param>
            <returns>True when authentication was successful, otherwise false</returns>
        </member>
        <member name="M:CoreRemoting.RemotingServer.Dispose">
            <summary>
            Frees managed resources.
            </summary>
        </member>
        <member name="P:CoreRemoting.RemotingServer.ActiveServerInstances">
            <summary>
            Gets a list of active server instances.
            </summary>
        </member>
        <member name="M:CoreRemoting.RemotingServer.GetActiveServerInstance(System.String)">
            <summary>
            Gets a active server instance by its unqiue instance name.
            </summary>
            <param name="uniqueServerInstanceName">Unique server instance name</param>
            <returns>Active CoreRemoting server</returns>
        </member>
        <member name="P:CoreRemoting.RemotingServer.DefaultRemotingServer">
            <summary>
            Gets or sets the default CoreRemoting server.
            </summary>
        </member>
        <member name="T:CoreRemoting.RemotingSession">
            <summary>
            Implements a CoreRemoting session, which controls the CoreRemoting protocol on application layer at server side.
            This is doing the RPC magic of CoreRemoting at server side.
            </summary>
        </member>
        <member name="E:CoreRemoting.RemotingSession.BeforeDispose">
            <summary>
            Event: Fired before the session is disposed to do some clean up.
            </summary>
        </member>
        <member name="M:CoreRemoting.RemotingSession.#ctor(System.Int32,System.Byte[],CoreRemoting.IRemotingServer,CoreRemoting.Channels.IRawMessageTransport)">
            <summary>
            Creates a new instance of the RemotingSession class.
            </summary>
            <param name="keySize">Key size of the RSA keys for asymmetric encryption</param>
            <param name="clientPublicKey">Public key of this session's client</param>
            <param name="server">Server instance, that hosts this session</param>
            <param name="rawMessageTransport">Component, that does the raw message transport (send and receive)</param>
        </member>
        <member name="M:CoreRemoting.RemotingSession.OnErrorOccured(System.String,System.Exception)">
            <summary>
            Event procedure: Called if the ErrorOccured event is fired on the raw message transport component.
            </summary>
            <param name="errorMessage">Error message</param>
            <param name="ex">Optional exception from the transport infrastructure</param>
        </member>
        <member name="P:CoreRemoting.RemotingSession.LastActivityTimestamp">
            <summary>
            Gets the timestamp of the last activity of this session.
            </summary>
        </member>
        <member name="P:CoreRemoting.RemotingSession.SessionId">
            <summary>
            Gets this session's unique session ID.
            </summary>
        </member>
        <member name="P:CoreRemoting.RemotingSession.MessageEncryption">
            <summary>
            Gets whether message encryption is enabled for this session.
            </summary>
        </member>
        <member name="P:CoreRemoting.RemotingSession.CreatedOn">
            <summary>
            Gets the timestamp when this session was created.
            </summary>
        </member>
        <member name="P:CoreRemoting.RemotingSession.IsAuthenticated">
            <summary>
            Gets whether authentication was successful.
            </summary>
        </member>
        <member name="P:CoreRemoting.RemotingSession.KeyPair">
            <summary>
            Gets the server side RSA key pair of this session.
            </summary>
        </member>
        <member name="P:CoreRemoting.RemotingSession.RemoteDelegateInvocation">
            <summary>
            Gets the remote delegate invocation event aggregator.
            </summary>
        </member>
        <member name="P:CoreRemoting.RemotingSession.Messaging">
            <summary>
            Gets component that does the raw message transport (send and receive).
            </summary>
        </member>
        <member name="P:CoreRemoting.RemotingSession.Identity">
            <summary>
            Gets the authenticated identity of this session.
            </summary>
        </member>
        <member name="M:CoreRemoting.RemotingSession.OnReceiveMessage(System.Byte[])">
            <summary>
            Event procedure: Called when the ReceiveMessage event is fired on the raw message transport component.
            </summary>
            <param name="rawMessage">Raw message data that has been received</param>
        </member>
        <member name="M:CoreRemoting.RemotingSession.ProcessGoodbyeMessage(CoreRemoting.RpcMessaging.WireMessage)">
            <summary>
            Processes a wire message that contains a goodbye message, which is sent from a client to close the session. 
            </summary>
            <param name="request">Wire message from client</param>
        </member>
        <member name="M:CoreRemoting.RemotingSession.ProcessAuthenticationRequestMessage(CoreRemoting.RpcMessaging.WireMessage)">
            <summary>
            Processes a wire message that contains a authentication request message, which is sent from a client to request authentication of a set of credentials. 
            </summary>
            <param name="request">Wire message from client</param>
        </member>
        <member name="M:CoreRemoting.RemotingSession.ProcessRpcMessage(CoreRemoting.RpcMessaging.WireMessage)">
            <summary>
            Calls a method on a server side service.
            </summary>
            <param name="request">RPC message from client</param>
            <returns>Task which provides the serialized response message containing the method result asynchronously</returns>
            <exception cref="T:System.MissingMethodException">Thrown if specified method in request doesn't exist</exception>
        </member>
        <member name="M:CoreRemoting.RemotingSession.MapDelegateArguments(System.Object[])">
            <summary>
            Maps delegate arguments into delegate proxies.
            </summary>
            <param name="parameterValues">Array of parameter values</param>
            <returns>Array of parameter values where delegate values are mapped into delegate proxies</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if no session is provided</exception>
        </member>
        <member name="M:CoreRemoting.RemotingSession.Dispose">
            <summary>
            Frees managed resources.
            </summary>
        </member>
        <member name="T:CoreRemoting.RpcMessaging.GoodbyeMessage">
            <summary>
            Describes a good bye message, which must be send from client to server in order to end a session.
            </summary>
        </member>
        <member name="P:CoreRemoting.RpcMessaging.GoodbyeMessage.SessionId">
            <summary>
            Gets or sets the session ID of the session that should be ended.
            </summary>
        </member>
        <member name="T:CoreRemoting.RpcMessaging.IMessageEncryptionManager">
            <summary>
            Interface of message encryption manager component.
            </summary>
        </member>
        <member name="M:CoreRemoting.RpcMessaging.IMessageEncryptionManager.CreateWireMessage(System.String,System.Byte[],CoreRemoting.Serialization.ISerializerAdapter,CoreRemoting.Encryption.RsaKeyPair,System.Byte[],System.Boolean,System.Byte[])">
            <summary>
            Creates a new wire message.
            </summary>
            <param name="messageType">Message type name</param>
            <param name="serializedMessage">Serialized message</param>
            <param name="serializer">Serializer used to serialize the signed content</param>
            <param name="keyPair">RSA key pair to be used for creating a RSA signature for the message data</param>
            <param name="sharedSecret">Shared secret (wire message will be not encrypted, if null)</param>
            <param name="error">Species whether the wire message is in error state</param>
            <param name="uniqueCallKey">Unique key to correlate RPC call</param>
            <returns>The created wire message</returns>
            <exception cref="T:System.ArgumentException">Thrown if the message type is left empty.</exception>
        </member>
        <member name="M:CoreRemoting.RpcMessaging.IMessageEncryptionManager.GetDecryptedMessageData(CoreRemoting.RpcMessaging.WireMessage,CoreRemoting.Serialization.ISerializerAdapter,System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Gets decrypted data from a wire message.
            </summary>
            <param name="message">Wire message</param>
            <param name="serializer">Serializer used to deserialized the signed content</param>
            <param name="sharedSecret">Shared secret (null, if the wire message is not encrypted)</param>
            <param name="sendersPublicKeyBlob">Public key of the sender used for RSA signature verification</param>
            <param name="sendersPublicKeySize">Sender's public key size</param>
            <returns>Decrypted raw data</returns>
        </member>
        <member name="T:CoreRemoting.RpcMessaging.IMethodCallMessageBuilder">
            <summary>
            Interface for message builder component.
            </summary>
        </member>
        <member name="M:CoreRemoting.RpcMessaging.IMethodCallMessageBuilder.BuildMethodCallMessage(CoreRemoting.Serialization.ISerializerAdapter,System.String,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Builds a new method call message.
            </summary>
            <param name="serializer">Serializer adapter used to serialize argument values</param>
            <param name="remoteServiceName">Unique name of the remote service that should be called</param>
            <param name="targetMethod">Target method information</param>
            <param name="args">Array of arguments, which should passed a parameters</param>
            <returns>The created method call message</returns>
        </member>
        <member name="M:CoreRemoting.RpcMessaging.IMethodCallMessageBuilder.BuildMethodParameterInfos(CoreRemoting.Serialization.ISerializerAdapter,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Builds method call parameter messages from arguments for a specified target method.
            </summary>
            <param name="serializer">Serializer adapter used to serialize argument values</param>
            <param name="targetMethod">Target method information</param>
            <param name="args">Array of arguments, which should passed a parameters</param>
            <returns>Enumerable of method call parameter messages</returns>
        </member>
        <member name="M:CoreRemoting.RpcMessaging.IMethodCallMessageBuilder.BuildMethodCallResultMessage(CoreRemoting.Serialization.ISerializerAdapter,System.Guid,System.Reflection.MethodInfo,System.Object[],System.Object)">
            <summary>
            Builds a new method call result message.
            </summary>
            <param name="serializer">Serializer adapter used to serialize argument values</param>
            <param name="uniqueCallKey">Unique key to correlate RPC call</param>
            <param name="method">Method information of the called method</param>
            <param name="args">Arguments</param>
            <param name="returnValue">Returned return value</param>
            <returns>Method call result message</returns>
        </member>
        <member name="T:CoreRemoting.RpcMessaging.MessageEncryptionManager">
            <summary>
            Provides tools for wire message creation an encryption.
            </summary>
        </member>
        <member name="M:CoreRemoting.RpcMessaging.MessageEncryptionManager.CreateWireMessage(System.String,System.Byte[],CoreRemoting.Serialization.ISerializerAdapter,CoreRemoting.Encryption.RsaKeyPair,System.Byte[],System.Boolean,System.Byte[])">
            <summary>
            Creates a new wire message.
            </summary>
            <param name="messageType">Message type name</param>
            <param name="serializedMessage">Serialized message</param>
            <param name="serializer">Serializer used to serialize the signed content</param>
            <param name="keyPair">RSA key pair to be used for creating a RSA signature for the message data</param>
            <param name="sharedSecret">Shared secret (wire message will be not encrypted, if null)</param>
            <param name="error">Species whether the wire message is in error state</param>
            <param name="uniqueCallKey">Unique key to correlate RPC call</param>
            <returns>The created wire message</returns>
            <exception cref="T:System.ArgumentException">Thrown if the message type is left empty.</exception>
        </member>
        <member name="M:CoreRemoting.RpcMessaging.MessageEncryptionManager.GetDecryptedMessageData(CoreRemoting.RpcMessaging.WireMessage,CoreRemoting.Serialization.ISerializerAdapter,System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Gets decrypted data from a wire message.
            </summary>
            <param name="message">Wire message</param>
            <param name="serializer">Serializer used to deserialized the signed content</param>
            <param name="sharedSecret">Shared secret (null, if the wire message is not encrypted)</param>
            <param name="sendersPublicKeyBlob">Public key of the sender used for RSA signature verification</param>
            <param name="sendersPublicKeySize">Sender's public key size</param>
            <returns>Decrypted raw data</returns>
        </member>
        <member name="T:CoreRemoting.RpcMessaging.MessagingExtensionMethods">
            <summary>
            Extension methods for messaging.
            </summary>
        </member>
        <member name="M:CoreRemoting.RpcMessaging.MessagingExtensionMethods.ParseNameValuePairTextMessage(System.String,System.Char,System.Char)">
            <summary>
            Parses a text message that contains name value pairs.
            </summary>
            <param name="message">Text message</param>
            <param name="entrySeperator">Char used to separate entries</param>
            <param name="pairSeperator">Char used to separate pairs</param>
            <returns>Dictionary with parsed name value pairs</returns>
        </member>
        <member name="M:CoreRemoting.RpcMessaging.MessagingExtensionMethods.UnwrapParametersFromDeserializedMethodCallMessage(CoreRemoting.RpcMessaging.MethodCallMessage,System.Object[]@,System.Type[]@)">
            <summary>
            Unwraps parameter values and parameter types from a deserialized MethodCallMessage.
            </summary>
            <param name="callMessage">MethodCallMessage object</param>
            <param name="parameterValues">Out: Unwrapped parameter values</param>
            <param name="parameterTypes">Out: Unwrapped parameter types</param>
        </member>
        <member name="T:CoreRemoting.RpcMessaging.MethodCallMessage">
            <summary>
            Describes a method call as serializable message.
            </summary>
        </member>
        <member name="P:CoreRemoting.RpcMessaging.MethodCallMessage.ServiceName">
            <summary>
            Gets or sets the name of the remote service that should be called.
            </summary>
        </member>
        <member name="P:CoreRemoting.RpcMessaging.MethodCallMessage.MethodName">
            <summary>
            Gets or sets the name of the remote method that should be called.
            </summary>
        </member>
        <member name="P:CoreRemoting.RpcMessaging.MethodCallMessage.Parameters">
            <summary>
            Gets or sets an array of messages that describes the parameters that should be passed to the remote method.
            </summary>
        </member>
        <member name="P:CoreRemoting.RpcMessaging.MethodCallMessage.CallContextSnapshot">
            <summary>
            Gets or sets an array of call context entries that should be send to the server.
            </summary>
        </member>
        <member name="T:CoreRemoting.RpcMessaging.MethodCallMessageBuilder">
            <summary>
            Method call message builder component.
            </summary>
        </member>
        <member name="M:CoreRemoting.RpcMessaging.MethodCallMessageBuilder.BuildMethodCallMessage(CoreRemoting.Serialization.ISerializerAdapter,System.String,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Builds a new method call message.
            </summary>
            <param name="serializer">Serializer adapter used to serialize argument values</param>
            <param name="remoteServiceName">Unique name of the remote service that should be called</param>
            <param name="targetMethod">Target method information</param>
            <param name="args">Array of arguments, which should passed a parameters</param>
            <returns>The created method call message</returns>
        </member>
        <member name="M:CoreRemoting.RpcMessaging.MethodCallMessageBuilder.BuildMethodParameterInfos(CoreRemoting.Serialization.ISerializerAdapter,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Builds method call parameter messages from arguments for a specified target method.
            </summary>
            <param name="serializer">Serializer adapter used to serialize argument values</param>
            <param name="targetMethod">Target method information</param>
            <param name="args">Array of arguments, which should passed a parameters</param>
            <returns>Enumerable of method call parameter messages</returns>
        </member>
        <member name="M:CoreRemoting.RpcMessaging.MethodCallMessageBuilder.BuildMethodCallResultMessage(CoreRemoting.Serialization.ISerializerAdapter,System.Guid,System.Reflection.MethodInfo,System.Object[],System.Object)">
            <summary>
            Builds a new method call result message.
            </summary>
            <param name="serializer">Serializer adapter used to serialize argument values</param>
            <param name="uniqueCallKey">Unique key to correlate RPC call</param>
            <param name="method">Method information of the called method</param>
            <param name="args">Arguments</param>
            <param name="returnValue">Returned return value</param>
            <returns>Method call result message</returns>
        </member>
        <member name="T:CoreRemoting.RpcMessaging.MethodCallOutParameterMessage">
            <summary>
            Serializable message that describes an out parameter.
            </summary>
        </member>
        <member name="P:CoreRemoting.RpcMessaging.MethodCallOutParameterMessage.ParameterName">
            <summary>
            Gets or sets the name of the parameter.
            </summary>
        </member>
        <member name="P:CoreRemoting.RpcMessaging.MethodCallOutParameterMessage.OutValue">
            <summary>
            Gets or sets the out value of the parameter.
            </summary>
        </member>
        <member name="P:CoreRemoting.RpcMessaging.MethodCallOutParameterMessage.IsOutValueNull">
            <summary>
            Gets or sets whether the out value is null.
            </summary>
        </member>
        <member name="T:CoreRemoting.RpcMessaging.MethodCallParameterMessage">
            <summary>
            Serializable message that describes a parameter of an remote method call. 
            </summary>
        </member>
        <member name="P:CoreRemoting.RpcMessaging.MethodCallParameterMessage.ParameterName">
            <summary>
            Gets or sets the name of the parameter.
            </summary>
        </member>
        <member name="P:CoreRemoting.RpcMessaging.MethodCallParameterMessage.ParameterTypeName">
            <summary>
            Gets or sets the type name of the parameter.
            </summary>
        </member>
        <member name="P:CoreRemoting.RpcMessaging.MethodCallParameterMessage.IsOut">
            <summary>
            Gets or sets whether the parameter is an out parameter or not.
            </summary>
        </member>
        <member name="P:CoreRemoting.RpcMessaging.MethodCallParameterMessage.IsValueNull">
            <summary>
            Gets or sets whether the parameter is null or not.
            </summary>
        </member>
        <member name="P:CoreRemoting.RpcMessaging.MethodCallParameterMessage.Value">
            <summary>
            Gets or sets the parameter value.
            </summary>
        </member>
        <member name="T:CoreRemoting.RpcMessaging.MethodCallResultMessage">
            <summary>
            Serializable message that describes the result of a remote method call.
            </summary>
        </member>
        <member name="P:CoreRemoting.RpcMessaging.MethodCallResultMessage.ReturnValue">
            <summary>
            Gets or sets the return value of the invoked method.
            </summary>
        </member>
        <member name="P:CoreRemoting.RpcMessaging.MethodCallResultMessage.IsReturnValueNull">
            <summary>
            Gets or sets whether the return value is null or not.
            </summary>
        </member>
        <member name="P:CoreRemoting.RpcMessaging.MethodCallResultMessage.OutParameters">
            <summary>
            Gets or sets an array of out parameters.
            </summary>
        </member>
        <member name="P:CoreRemoting.RpcMessaging.MethodCallResultMessage.CallContextSnapshot">
            <summary>
            Gets or sets a snapshot of the call context that flows from server back to the client. 
            </summary>
        </member>
        <member name="T:CoreRemoting.RpcMessaging.RemoteDelegateInvocationMessage">
            <summary>
            Serializable message that describes the invocation of a remote delegate.
            </summary>
        </member>
        <member name="P:CoreRemoting.RpcMessaging.RemoteDelegateInvocationMessage.UniqueCallKey">
            <summary>
            Gets or sets an unique key to correlate RPC calls.
            </summary>
        </member>
        <member name="P:CoreRemoting.RpcMessaging.RemoteDelegateInvocationMessage.HandlerKey">
            <summary>
            Gets or sets a unique handler key to identify the remote delegate. 
            </summary>
        </member>
        <member name="P:CoreRemoting.RpcMessaging.RemoteDelegateInvocationMessage.DelegateArguments">
            <summary>
            Gets or sets an array of arguments that should be passed as parameters to the remote delegate.
            </summary>
        </member>
        <member name="T:CoreRemoting.RpcMessaging.WireMessage">
            <summary>
            Serializable message to transport RPC invocation details and their results over the wire. 
            </summary>
        </member>
        <member name="P:CoreRemoting.RpcMessaging.WireMessage.MessageType">
            <summary>
            Gets or sets the type of the message.
            </summary>
        </member>
        <member name="P:CoreRemoting.RpcMessaging.WireMessage.Data">
            <summary>
            Gets or sets the raw data of the message content and its RSA signatures (only if message encryption is enabled).
            </summary>
        </member>
        <member name="P:CoreRemoting.RpcMessaging.WireMessage.Iv">
            <summary>
            Gets or sets the initialization vector as byte array (only needed if message encryption is enabled).
            </summary>
        </member>
        <member name="P:CoreRemoting.RpcMessaging.WireMessage.Error">
            <summary>
            Gets or sets whether this message contains error data.
            </summary>
        </member>
        <member name="P:CoreRemoting.RpcMessaging.WireMessage.UniqueCallKey">
            <summary>
            Gets or sets an unique key to correlate RPC calls.
            </summary>
        </member>
        <member name="T:CoreRemoting.Serialization.Binary.BinaryFormatterExtensions">
            <summary>
            Extension methods for binary serialization.
            </summary>
        </member>
        <member name="M:CoreRemoting.Serialization.Binary.BinaryFormatterExtensions.Safe(System.Runtime.Serialization.Formatters.Binary.BinaryFormatter)">
            <summary>
            Makes the <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/> safe.
            </summary>
            <param name="formatter">The <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/> to guard.</param>
            <returns>The safe version of the <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>.</returns>
        </member>
        <member name="M:CoreRemoting.Serialization.Binary.BinaryFormatterExtensions.SerializeByteArray(System.Runtime.Serialization.Formatters.Binary.BinaryFormatter,System.Object)">
            <summary>
            Serializes the specified object into a byte array.
            </summary>
            <param name="formatter">Binary formatter instance</param>
            <param name="objectToSerialize">Object to serialize</param>
            <returns>Serialized data</returns>
        </member>
        <member name="M:CoreRemoting.Serialization.Binary.BinaryFormatterExtensions.DeserializeSafe(System.Runtime.Serialization.Formatters.Binary.BinaryFormatter,System.Byte[])">
            <summary>
            Deserializes raw data back into an object.
            </summary>
            <param name="formatter">Binary formatter instance</param>
            <param name="rawData">Raw data that should be deserialized</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="T:CoreRemoting.Serialization.Binary.BinarySerializerAdapter">
            <summary>
            Serializer adapter to allow binary serialization.
            </summary>
        </member>
        <member name="M:CoreRemoting.Serialization.Binary.BinarySerializerAdapter.#ctor(CoreRemoting.Serialization.Binary.BinarySerializerConfig)">
            <summary>
            Creates a new instance of the BinarySerializerAdapter class.
            </summary>
            <param name="config">Configuration settings</param>
        </member>
        <member name="M:CoreRemoting.Serialization.Binary.BinarySerializerAdapter.GetFormatter">
            <summary>
            Gets a formatter instance.
            The instance is reused for further calls.
            </summary>
            <returns>Binary formatter instance</returns>
        </member>
        <member name="M:CoreRemoting.Serialization.Binary.BinarySerializerAdapter.Serialize``1(``0)">
            <summary>
            Serializes an object graph.
            </summary>
            <param name="graph">Object graph to be serialized</param>
            <typeparam name="T">Object type</typeparam>
            <returns>Serialized data</returns>
        </member>
        <member name="M:CoreRemoting.Serialization.Binary.BinarySerializerAdapter.Serialize(System.Type,System.Object)">
            <summary>
            Serializes an object graph.
            </summary>
            <param name="type">Object type</param>
            <param name="graph">Object graph to be serialized</param>
            <returns>Serialized data</returns>
        </member>
        <member name="M:CoreRemoting.Serialization.Binary.BinarySerializerAdapter.Deserialize``1(System.Byte[])">
            <summary>
            Deserializes raw data back into an object graph.
            </summary>
            <param name="rawData">Raw data that should be deserialized</param>
            <typeparam name="T">Object type</typeparam>
            <returns>Deserialized object graph</returns>
        </member>
        <member name="M:CoreRemoting.Serialization.Binary.BinarySerializerAdapter.Deserialize(System.Type,System.Byte[])">
            <summary>
            Deserializes raw data back into an object graph.
            </summary>
            <param name="type">Object type</param>
            <param name="rawData">Raw data that should be deserialized</param>
            <returns>Deserialized object graph</returns>
        </member>
        <member name="P:CoreRemoting.Serialization.Binary.BinarySerializerAdapter.EnvelopeNeededForParameterSerialization">
            <summary>
            Gets whether parameter values must be put in an envelope object for proper deserialization, or not. 
            </summary>
        </member>
        <member name="T:CoreRemoting.Serialization.Binary.BinarySerializerConfig">
            <summary>
            Describes binary serialization settings.
            </summary>
        </member>
        <member name="M:CoreRemoting.Serialization.Binary.BinarySerializerConfig.#ctor">
            <summary>
            Creates a new instance of the BinarySerializerConfig class.
            </summary>
        </member>
        <member name="P:CoreRemoting.Serialization.Binary.BinarySerializerConfig.TypeFormat">
            <summary>
            Gets or sets the style how types should be formatted.
            </summary>
        </member>
        <member name="P:CoreRemoting.Serialization.Binary.BinarySerializerConfig.FilterLevel">
            <summary>
            Gets or sets the type filter level for security reasons.
            </summary>
        </member>
        <member name="P:CoreRemoting.Serialization.Binary.BinarySerializerConfig.SerializeAssemblyVersions">
            <summary>
            Gets or sets whether assembly versions should be serialized or not.
            </summary>
        </member>
        <member name="T:CoreRemoting.Serialization.Binary.CustomDelegateSerializationHolder">
            <summary>
            Custom replacement for the DelegateSerializationHolder featuring delegate validation.
            </summary>
        </member>
        <member name="M:CoreRemoting.Serialization.Binary.CustomDelegateSerializationHolder.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CoreRemoting.Serialization.Binary.CustomDelegateSerializationHolder"/> class.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CoreRemoting.Serialization.Binary.CustomDelegateSerializationHolder.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="T:System.Runtime.Serialization.ISerializable" />
        </member>
        <member name="M:CoreRemoting.Serialization.Binary.CustomDelegateSerializationHolder.GetRealObject(System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="T:System.Runtime.Serialization.IObjectReference" />
        </member>
        <member name="T:CoreRemoting.Serialization.Binary.DataSetSurrogate">
            <summary>
            Deserialization surrogate for the DataSet class.
            </summary>
        </member>
        <member name="M:CoreRemoting.Serialization.Binary.DataSetSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="T:System.Runtime.Serialization.ISerializationSurrogate" />
        </member>
        <member name="M:CoreRemoting.Serialization.Binary.DataSetSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <inheritdoc cref="T:System.Runtime.Serialization.ISerializationSurrogate" />
        </member>
        <member name="T:CoreRemoting.Serialization.Binary.DelegateValidator">
            <summary>
            Blacklist-based delegate validator.
            </summary>
        </member>
        <member name="F:CoreRemoting.Serialization.Binary.DelegateValidator.DefaultBlacklistedNamespaces">
            <summary>
            The default blacklist of the namespaces.
            </summary>
        </member>
        <member name="M:CoreRemoting.Serialization.Binary.DelegateValidator.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:CoreRemoting.Serialization.Binary.DelegateValidator"/> class.
            </summary>
            <param name="blacklistedNamespaces">Namespace blacklist.</param>
        </member>
        <member name="P:CoreRemoting.Serialization.Binary.DelegateValidator.Default">
            <summary>
            Gets or sets the default <see cref="T:CoreRemoting.Serialization.Binary.IDelegateValidator"/> instance.
            </summary>
        </member>
        <member name="M:CoreRemoting.Serialization.Binary.DelegateValidator.ValidateDelegate(System.Delegate)">
            <summary>
            Validates the given delegates.
            Throws exceptions for methods defined in the blacklisted namespaces.
            </summary>
            <param name="del">The delegate to validate.</param>
        </member>
        <member name="T:CoreRemoting.Serialization.Binary.IDelegateValidator">
            <summary>
            Interface for validating the deserialized delegates.
            </summary>
        </member>
        <member name="M:CoreRemoting.Serialization.Binary.IDelegateValidator.ValidateDelegate(System.Delegate)">
            <summary>
            Validates the given delegate.
            Throws exceptions for the unsafe delegates found in the invocation list.
            </summary>
            <param name="del">The delegate to validate.</param>
        </member>
        <member name="T:CoreRemoting.Serialization.Binary.ITypeNameValidator">
            <summary>
            Interface for validating type names before loading types for deserialization.
            </summary>
        </member>
        <member name="M:CoreRemoting.Serialization.Binary.ITypeNameValidator.ValidateTypeName(System.String,System.String)">
            <summary>
            Validates the given type name before loading.
            Throws exceptions for the types not safe for deserialization.
            </summary>
            <param name="assemblyName">The name of the assembly.</param>
            <param name="typeName">The name of the type.</param>
        </member>
        <member name="T:CoreRemoting.Serialization.Binary.SafeSerializationBinder">
            <inheritdoc cref="T:System.Runtime.Serialization.SerializationBinder" />
        </member>
        <member name="F:CoreRemoting.Serialization.Binary.SafeSerializationBinder.CORE_LIBRARY_ASSEMBLY_NAME">
            <summary>
            Core library assembly name.
            </summary>
        </member>
        <member name="F:CoreRemoting.Serialization.Binary.SafeSerializationBinder.DELEGATE_SERIALIZATION_HOLDER_TYPE_NAME">
            <summary>
            System.DelegateSerializationHolder type name.
            </summary>
        </member>
        <member name="M:CoreRemoting.Serialization.Binary.SafeSerializationBinder.#ctor(System.Runtime.Serialization.SerializationBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:CoreRemoting.Serialization.Binary.SafeSerializationBinder"/> class.
            </summary>
            <param name="nextBinder">Next serialization binder in chain.</param>
        </member>
        <member name="M:CoreRemoting.Serialization.Binary.SafeSerializationBinder.BindToType(System.String,System.String)">
            <inheritdoc cref="T:System.Runtime.Serialization.SerializationBinder" />
        </member>
        <member name="T:CoreRemoting.Serialization.Binary.SafeSurrogateSelector">
            <summary>
            Safe surrogate selector provides surrogates for DataSet and WindowsIdentity classes.
            </summary>
        </member>
        <member name="M:CoreRemoting.Serialization.Binary.SafeSurrogateSelector.#ctor(System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Initializes a new instance of the <see cref="T:CoreRemoting.Serialization.Binary.SafeSurrogateSelector"/> class.
            </summary>
            <param name="nextSelector">Next <see cref="T:System.Runtime.Serialization.ISurrogateSelector"/>, optional.</param>
        </member>
        <member name="M:CoreRemoting.Serialization.Binary.SafeSurrogateSelector.ChainSelector(System.Runtime.Serialization.ISurrogateSelector)">
            <inheritdoc cref="T:System.Runtime.Serialization.ISurrogateSelector" />
        </member>
        <member name="M:CoreRemoting.Serialization.Binary.SafeSurrogateSelector.GetNextSelector">
            <inheritdoc cref="T:System.Runtime.Serialization.ISurrogateSelector" />
        </member>
        <member name="M:CoreRemoting.Serialization.Binary.SafeSurrogateSelector.GetSurrogate(System.Type,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector@)">
            <inheritdoc cref="T:System.Runtime.Serialization.ISurrogateSelector" />
        </member>
        <member name="T:CoreRemoting.Serialization.Binary.TypeFullName">
            <summary>
            Represents the name of a .NET type.
            </summary>
            <remarks>
            AssemblyName doesn't contain Version part.
            </remarks>
        </member>
        <member name="P:CoreRemoting.Serialization.Binary.TypeFullName.TypeName">
            <summary>
            Gets or sets the name of the type.
            </summary>
        </member>
        <member name="P:CoreRemoting.Serialization.Binary.TypeFullName.AssemblyName">
            <summary>
            Gets or sets the name of the assembly.
            </summary>
        </member>
        <member name="M:CoreRemoting.Serialization.Binary.TypeFullName.Parse(System.String)">
            <summary>
            Parses the given type name and returns the <see cref="T:CoreRemoting.Serialization.Binary.TypeFullName"/> instance.
            </summary>
            <param name="typeName">Assembly-qualified type name.</param>
            <returns>A parsed <see cref="T:CoreRemoting.Serialization.Binary.TypeFullName"/> instance.</returns>
        </member>
        <member name="M:CoreRemoting.Serialization.Binary.TypeFullName.GetHashCode">
            <inheritdoc cref="T:System.Object" />
        </member>
        <member name="M:CoreRemoting.Serialization.Binary.TypeFullName.Equals(CoreRemoting.Serialization.Binary.TypeFullName)">
            <inheritdoc cref="T:System.IEquatable`1" />
        </member>
        <member name="T:CoreRemoting.Serialization.Binary.TypeNameValidator">
            <summary>
            Validates the type names before loading them for deserialization.
            </summary>
        </member>
        <member name="F:CoreRemoting.Serialization.Binary.TypeNameValidator.DefaultBlacklistedTypes">
            <summary>
            The default blacklist of the types.
            </summary>
        </member>
        <member name="M:CoreRemoting.Serialization.Binary.TypeNameValidator.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:CoreRemoting.Serialization.Binary.TypeNameValidator"/> class.
            </summary>
            <param name="blacklistedTypes">The list of the blacklisted types.</param>
        </member>
        <member name="P:CoreRemoting.Serialization.Binary.TypeNameValidator.Default">
            <summary>
            Gets or sets the default <see cref="T:CoreRemoting.Serialization.Binary.ITypeNameValidator" /> instance.
            </summary>
        </member>
        <member name="M:CoreRemoting.Serialization.Binary.TypeNameValidator.ValidateTypeName(System.String,System.String)">
            <inheritdoc cref="T:CoreRemoting.Serialization.Binary.ITypeNameValidator" />
        </member>
        <member name="T:CoreRemoting.Serialization.Binary.UnsafeDeserializationException">
            <summary>
            Exception to be thrown when possible deserialization vulnerability is detected.
            </summary>
        </member>
        <member name="M:CoreRemoting.Serialization.Binary.UnsafeDeserializationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CoreRemoting.Serialization.Binary.UnsafeDeserializationException"/> class.
            </summary>
        </member>
        <member name="M:CoreRemoting.Serialization.Binary.UnsafeDeserializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CoreRemoting.Serialization.Binary.UnsafeDeserializationException"/> class.
            </summary>
            <param name="message">Exception message.</param>
        </member>
        <member name="M:CoreRemoting.Serialization.Binary.UnsafeDeserializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="T:System.Security.SecurityException"/>
        </member>
        <member name="M:CoreRemoting.Serialization.Binary.UnsafeDeserializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="T:System.Security.SecurityException"/>
        </member>
        <member name="T:CoreRemoting.Serialization.Binary.WindowsIdentitySurrogate">
            <summary>
            Deserialization surrogate for the WindowsIdentity class.
            </summary>
        </member>
        <member name="M:CoreRemoting.Serialization.Binary.WindowsIdentitySurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="T:System.Runtime.Serialization.ISerializationSurrogate" />
        </member>
        <member name="M:CoreRemoting.Serialization.Binary.WindowsIdentitySurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <inheritdoc cref="T:System.Runtime.Serialization.ISerializationSurrogate" />
        </member>
        <member name="T:CoreRemoting.Serialization.Bson.BsonSerializerAdapter">
            <summary>
            Serializer adapter to allow BSON serialization.
            </summary>
        </member>
        <member name="M:CoreRemoting.Serialization.Bson.BsonSerializerAdapter.#ctor(CoreRemoting.Serialization.Bson.BsonSerializerConfig)">
            <summary>
            Creates a new instance of the BsonSerializerAdapter class.
            </summary>
            <param name="config">Optional configuration settings</param>
        </member>
        <member name="M:CoreRemoting.Serialization.Bson.BsonSerializerAdapter.Serialize``1(``0)">
            <summary>
            Serializes an object graph.
            </summary>
            <param name="graph">Object graph to be serialized</param>
            <typeparam name="T">Object type</typeparam>
            <returns>Serialized data</returns>
        </member>
        <member name="M:CoreRemoting.Serialization.Bson.BsonSerializerAdapter.Serialize(System.Type,System.Object)">
            <summary>
            Serializes an object graph.
            </summary>
            <param name="type">Object type</param>
            <param name="graph">Object graph to be serialized</param>
            <returns>Serialized data</returns>
        </member>
        <member name="M:CoreRemoting.Serialization.Bson.BsonSerializerAdapter.Deserialize``1(System.Byte[])">
            <summary>
            Deserializes raw data back into an object graph.
            </summary>
            <param name="rawData">Raw data that should be deserialized</param>
            <typeparam name="T">Object type</typeparam>
            <returns>Deserialized object graph</returns>
        </member>
        <member name="M:CoreRemoting.Serialization.Bson.BsonSerializerAdapter.Deserialize(System.Type,System.Byte[])">
            <summary>
            Deserializes raw data back into an object graph.
            </summary>
            <param name="type">Object type</param>
            <param name="rawData">Raw data that should be deserialized</param>
            <returns>Deserialized object graph</returns>
        </member>
        <member name="P:CoreRemoting.Serialization.Bson.BsonSerializerAdapter.EnvelopeNeededForParameterSerialization">
            <summary>
            Gets whether parameter values must be put in an envelope object for proper deserialization, or not. 
            </summary>
        </member>
        <member name="T:CoreRemoting.Serialization.Bson.BsonSerializerConfig">
            <summary>
            Describes BSON serializer settings.
            </summary>
        </member>
        <member name="M:CoreRemoting.Serialization.Bson.BsonSerializerConfig.#ctor(System.Collections.Generic.IEnumerable{Newtonsoft.Json.JsonConverter})">
            <summary>
            Creates a new instance of the BsonSerializerConfig class.
            </summary>
            <param name="jsonConverters">Optional list of JSON converters</param>
        </member>
        <member name="P:CoreRemoting.Serialization.Bson.BsonSerializerConfig.JsonConverters">
            <summary>
            Gets a list of JSON converters to customize BSON serialization.
            </summary>
        </member>
        <member name="T:CoreRemoting.Serialization.Bson.Envelope">
            <summary>
            Wraps values and preserve their types for serialization.
            </summary>
        </member>
        <member name="M:CoreRemoting.Serialization.Bson.Envelope.#ctor">
            <summary>
            Creates a new instance of the Envelope class.
            </summary>
        </member>
        <member name="M:CoreRemoting.Serialization.Bson.Envelope.#ctor(System.Object)">
            <summary>
            Creates a new instance of the Envelope class.
            </summary>
            <param name="value">Value to wrap</param>
        </member>
        <member name="P:CoreRemoting.Serialization.Bson.Envelope.Type">
            <summary>
            Gets the type of the wrapped value.
            </summary>
        </member>
        <member name="P:CoreRemoting.Serialization.Bson.Envelope.Value">
            <summary>
            Gets the wrapped value.
            </summary>
        </member>
        <member name="T:CoreRemoting.Serialization.ISerializerAdapter">
            <summary>
            Interface that serializer adapter components must implement.
            </summary>
        </member>
        <member name="P:CoreRemoting.Serialization.ISerializerAdapter.EnvelopeNeededForParameterSerialization">
            <summary>
            Gets whether parameter values must be put in an envelope object for proper deserialization, or not. 
            </summary>
        </member>
        <member name="M:CoreRemoting.Serialization.ISerializerAdapter.Serialize``1(``0)">
            <summary>
            Serializes an object graph.
            </summary>
            <param name="graph">Object graph to be serialized</param>
            <typeparam name="T">Object type</typeparam>
            <returns>Serialized data</returns>
        </member>
        <member name="M:CoreRemoting.Serialization.ISerializerAdapter.Serialize(System.Type,System.Object)">
            <summary>
            Serializes an object graph.
            </summary>
            <param name="type">Object type</param>
            <param name="graph">Object graph to be serialized</param>
            <returns>Serialized data</returns>
        </member>
        <member name="M:CoreRemoting.Serialization.ISerializerAdapter.Deserialize``1(System.Byte[])">
            <summary>
            Deserializes raw data back into an object graph.
            </summary>
            <param name="rawData">Raw data that should be deserialized</param>
            <typeparam name="T">Object type</typeparam>
            <returns>Deserialized object graph</returns>
        </member>
        <member name="M:CoreRemoting.Serialization.ISerializerAdapter.Deserialize(System.Type,System.Byte[])">
            <summary>
            Deserializes raw data back into an object graph.
            </summary>
            <param name="type">Object type</param>
            <param name="rawData">Raw data that should be deserialized</param>
            <returns>Deserialized object graph</returns>
        </member>
        <member name="T:CoreRemoting.ServerConfig">
            <summary>
            Describes the configuration settings of a CoreRemoting service instance.
            </summary>
        </member>
        <member name="M:CoreRemoting.ServerConfig.#ctor">
            <summary>
            Creates new new instance of the ServerConfig class.
            </summary>
        </member>
        <member name="P:CoreRemoting.ServerConfig.HostName">
            <summary>
            Gets or sets the host name.
            </summary>
        </member>
        <member name="P:CoreRemoting.ServerConfig.NetworkPort">
            <summary>
            Gets or sets the network port on which the server should be listening for requests.
            </summary>
        </member>
        <member name="P:CoreRemoting.ServerConfig.KeySize">
            <summary>
            Gets or sets the key size for asymmetric encryption (only relevant, if message encryption is enabled).
            </summary>
        </member>
        <member name="P:CoreRemoting.ServerConfig.MessageEncryption">
            <summary>
            Gets or sets whether messages should be encrypted or not.
            </summary>
        </member>
        <member name="P:CoreRemoting.ServerConfig.Serializer">
            <summary>
            Gets or sets the serializer to be used (Binary serializer is used, if set to null).
            </summary>
        </member>
        <member name="P:CoreRemoting.ServerConfig.DependencyInjectionContainer">
            <summary>
            Gets or sets the dependency injection container to be used for service registration.
            Castle Windsor Container is used, if set to null.
            </summary>
        </member>
        <member name="P:CoreRemoting.ServerConfig.RegisterServicesAction">
            <summary>
            Gets or sets an optional action which should be called on server startup to register services.
            </summary>
        </member>
        <member name="P:CoreRemoting.ServerConfig.SessionRepository">
            <summary>
            Gets or sets the session repository to be used to manage sessions.
            </summary>
        </member>
        <member name="P:CoreRemoting.ServerConfig.Channel">
            <summary>
            Gets or sets the server channel to be used for transport of messages over the wire (WebsocketServerChannel is used, if set to null).
            </summary>
        </member>
        <member name="P:CoreRemoting.ServerConfig.AuthenticationRequired">
            <summary>
            Gets or sets whether authentication is required in order to establish a new session.
            </summary>
        </member>
        <member name="P:CoreRemoting.ServerConfig.AuthenticationProvider">
            <summary>
            Gets or sets the authentication provider that should be used to handle authentication requests.
            </summary>
        </member>
        <member name="P:CoreRemoting.ServerConfig.UniqueServerInstanceName">
            <summary>
            Gets or sets the unique name of this server instance.
            </summary>
        </member>
        <member name="P:CoreRemoting.ServerConfig.InactiveSessionSweepInterval">
            <summary>
            Gets or sets the sweep interval for inactive sessions in seconds (No session sweeping if set to 0).
            </summary>
        </member>
        <member name="P:CoreRemoting.ServerConfig.MaximumSessionInactivityTime">
            <summary>
            Gets or sets the maximum session inactivity time in minutes.
            </summary>
        </member>
        <member name="P:CoreRemoting.ServerConfig.IsDefault">
            <summary>
            Gets or set whether this is the default server.
            </summary>
        </member>
        <member name="T:CoreRemoting.ServerRpcContext">
            <summary>
            Describes the server side context of a RPC call.
            </summary>
        </member>
        <member name="P:CoreRemoting.ServerRpcContext.UniqueCallKey">
            <summary>
            Gets or sets the unique key of RPC call.
            </summary>
        </member>
        <member name="P:CoreRemoting.ServerRpcContext.Exception">
            <summary>
            Gets or sets the last exception that is occurred.
            </summary>
        </member>
        <member name="P:CoreRemoting.ServerRpcContext.MethodCallMessage">
            <summary>
            Gets the message that describes the remote method call.
            </summary>
        </member>
        <member name="P:CoreRemoting.ServerRpcContext.MethodCallResultMessage">
            <summary>
            Gets or sets the message that contains the results of a remote method call.
            </summary>
        </member>
        <member name="P:CoreRemoting.ServerRpcContext.ServiceInstance">
            <summary>
            Gets or sets the instance of the service, on which the method is called.
            </summary>
        </member>
        <member name="P:CoreRemoting.ServerRpcContext.Session">
            <summary>
            Gets or sets the CoreRemoting session that is used to handle the RPC.
            </summary>
        </member>
        <member name="T:CoreRemoting.ServiceProxy`1">
            <summary>
            Implements a proxy of a remote service that is hosted on a CoreRemoting server..
            This is doing the RPC magic of CoreRemoting at client side.
            </summary>
            <typeparam name="TServiceInterface">Type of the remote service's interface (also known as contract of the service)</typeparam>
        </member>
        <member name="M:CoreRemoting.ServiceProxy`1.#ctor(CoreRemoting.RemotingClient,System.String)">
            <summary>
            Creates a new instance of the ServiceProxy class.
            </summary>
            <param name="client">CoreRemoting client to be used for client/server communication</param>
            <param name="serviceName">Unique name of the remote service</param>
        </member>
        <member name="M:CoreRemoting.ServiceProxy`1.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:CoreRemoting.ServiceProxy`1.CoreRemoting#IServiceProxy#Shutdown">
            <summary>
            Shutdown service proxy and free resources.
            </summary>
        </member>
        <member name="P:CoreRemoting.ServiceProxy`1.Interface">
            <summary>
            Gets or sets the interface type of the proxied remote service.
            </summary>
        </member>
        <member name="M:CoreRemoting.ServiceProxy`1.Castle#DynamicProxy#IInterceptor#Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            Intercepts a call of a member on the proxy object. 
            </summary>
            <param name="invocation">Intercepted invocation details</param>
            <exception cref="T:CoreRemoting.RemotingException">Thrown if a remoting operation has been failed</exception>
            <exception cref="T:System.NotSupportedException">Thrown if a member of a type marked as OneWay is intercepted, that has another return type than void</exception>
            <exception cref="T:CoreRemoting.RemoteInvocationException">Thrown if an exception occurred when the remote method was invoked</exception>
        </member>
        <member name="M:CoreRemoting.ServiceProxy`1.MapDelegateArguments(Castle.DynamicProxy.IInvocation)">
            <summary>
            Maps delegate arguments into serializable RemoteDelegateInfo objects.
            </summary>
            <param name="invocation">Invocation details</param>
            <returns>Array of arguments (includes mapped ones)</returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="T:CoreRemoting.SessionRepository">
            <summary>
            Default in-memory session repository.
            </summary>
        </member>
        <member name="M:CoreRemoting.SessionRepository.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the SessionRepository class.
            </summary>
            <param name="keySize">Key size for asymmetric encryption. Should be 3072 or better in 2021 (Please use steps of 1024).</param>
            <param name="inactiveSessionSweepInterval">Sweep interval for inactive sessions in seconds (No session sweeping, if set to 0)</param>
            <param name="maximumSessionInactivityTime">Maximum session inactivity time in minutes</param>
        </member>
        <member name="M:CoreRemoting.SessionRepository.StartInactiveSessionSweepTimer(System.Int32)">
            <summary>
            Starts the inactive session sweep timer.
            </summary>
            <param name="inactiveSessionSweepInterval">Sweep interval for inactive sessions in seconds</param>
        </member>
        <member name="M:CoreRemoting.SessionRepository.InactiveSessionSweepTimerOnElapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Event procedure: Called when the inactive session sweep timer elapses. 
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:CoreRemoting.SessionRepository.KeySize">
            <summary>
            Gets the key size for asymmetric encryption. Should be 3072 or better in 2021 ;)
            </summary>
        </member>
        <member name="M:CoreRemoting.SessionRepository.CreateSession(System.Byte[],CoreRemoting.IRemotingServer,CoreRemoting.Channels.IRawMessageTransport)">
            <summary>
            Creates a new session.
            </summary>
            <param name="clientPublicKey">Client's public key</param>
            <param name="server">Server instance</param>
            <param name="rawMessageTransport">Component that does the raw message transport</param>
            <returns>The newly created session</returns>
        </member>
        <member name="M:CoreRemoting.SessionRepository.GetSession(System.Guid)">
            <summary>
            Gets a specified session by its ID.
            </summary>
            <param name="sessionId">Session ID</param>
            <returns>The session correlating to the specified session ID</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown, if no session with the specified session ID is found</exception>
        </member>
        <member name="M:CoreRemoting.SessionRepository.RemoveSession(System.Guid)">
            <summary>
            Removes a specified session by its ID.
            </summary>
            <param name="sessionId">Session ID</param>
        </member>
        <member name="P:CoreRemoting.SessionRepository.Sessions">
            <summary>
            Gets a list of all sessions.
            </summary>
        </member>
        <member name="M:CoreRemoting.SessionRepository.Dispose">
            <summary>
            Frees managed resources.
            </summary>
        </member>
    </members>
</doc>
